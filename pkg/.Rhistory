}
for(index in 1:length(founder_alt)){
polygon(c(se_alt[index], se_alt[index+1], se_alt[index+1], se_alt[index]), c(0.55,0.55,0.95,0.95) + length(sets)*off +set-length(sets)*2+1-(1*length(sets)==1),
col=adjustcolor(founder_alt[index],alpha.f=1), lty=0)
}
}
}
dev.off()
}
png("C:/Users/pook/Desktop/Fig10.png", width=2250, height= 1000, res=300)
par(mar=c(4.1,10.1,1.1,1.1))
firstn <- 5
sets <-  1
plot(-100000,0,ylim=c(0,firstn*length(sets)), xlim=c(0, max(start)), xlab="SNP", yaxt='n', ylab="")
axis(2, at=1:firstn-0.75, label=paste(c("est. founder: haplo "), 1:firstn), las=2)
axis(2, at=1:firstn-0.25, label=paste(c("real founder: haplo "), 1:firstn), las=2)
for(off in 1:firstn){
for(set in sets){
present <- NULL
for(index in 1:length(blockl)){
if(sum(blockl[[index]][[6]]==(off*2+set-length(sets)))){
present <- c(present, index)
}
}
start <- se[present,]
se_alt <- population$breeding[[16]][[1]][[off]][[set]] * 10000*5/3
founder_alt <- NULL
for(index in 1:length(population$breeding[[16]][[1]][[off]][[set+4]])){
founder_alt <- c(founder_alt,miraculix::decodeOrigins(population$breeding[[16]][[1]][[off]][[set+4]], row=index)[3])
}
for(index1 in 1:length(present)){
index <- present[index1]
polygon(c(se[index,1], se[index,2], se[index,2], se[index,1]), c(0.05,0.05,0.45,0.45)+off*length(sets)+set-length(sets)*2+1-(1*length(sets)==1),
col=coloring[founder_info[index,6]], lty=0)
}
for(index in 1:length(founder_alt)){
polygon(c(se_alt[index], se_alt[index+1], se_alt[index+1], se_alt[index]), c(0.55,0.55,0.95,0.95) + length(sets)*off +set-length(sets)*2+1-(1*length(sets)==1),
col=coloring[founder_alt[index]], lty=0)
}
}
}
dev.off()
plot(founder_info[,2])
set.seed(7)
library(randomcoloR)
coloring <- distinctColorPalette(nindi)
{
png("C:/Users/pook/Desktop/Fig10.png", width=2250, height= 1000, res=300)
par(mar=c(4.1,10.1,1.1,1.1))
firstn <- 5
sets <-  1
plot(-100000,0,ylim=c(0,firstn*length(sets)), xlim=c(0, max(start)), xlab="SNP", yaxt='n', ylab="")
axis(2, at=1:firstn-0.75, label=paste(c("est. founder: haplo "), 1:firstn), las=2)
axis(2, at=1:firstn-0.25, label=paste(c("real founder: haplo "), 1:firstn), las=2)
for(off in 1:firstn){
for(set in sets){
present <- NULL
for(index in 1:length(blockl)){
if(sum(blockl[[index]][[6]]==(off*2+set-length(sets)))){
present <- c(present, index)
}
}
start <- se[present,]
se_alt <- population$breeding[[16]][[1]][[off]][[set]] * 10000*5/3
founder_alt <- NULL
for(index in 1:length(population$breeding[[16]][[1]][[off]][[set+4]])){
founder_alt <- c(founder_alt,miraculix::decodeOrigins(population$breeding[[16]][[1]][[off]][[set+4]], row=index)[3])
}
for(index1 in 1:length(present)){
index <- present[index1]
polygon(c(se[index,1], se[index,2], se[index,2], se[index,1]), c(0.05,0.05,0.45,0.45)+off*length(sets)+set-length(sets)*2+1-(1*length(sets)==1),
col=coloring[founder_info[index,6]], lty=0)
}
for(index in 1:length(founder_alt)){
polygon(c(se_alt[index], se_alt[index+1], se_alt[index+1], se_alt[index]), c(0.55,0.55,0.95,0.95) + length(sets)*off +set-length(sets)*2+1-(1*length(sets)==1),
col=coloring[founder_alt[index]], lty=0)
}
}
}
dev.off()
png("C:/Users/pook/Desktop/Fig10_old.png", width=2250, height= 1000, res=300)
par(mar=c(4.1,10.1,1.1,1.1))
firstn <- 5
sets <-  1
plot(-100000,0,ylim=c(0,firstn*length(sets)), xlim=c(0, max(start)), xlab="SNP", yaxt='n', ylab="")
axis(2, at=1:firstn-0.75, label=paste(c("est. founder: haplo "), 1:firstn), las=2)
axis(2, at=1:firstn-0.25, label=paste(c("real founder: haplo "), 1:firstn), las=2)
for(off in 1:firstn){
for(set in sets){
present <- NULL
for(index in 1:length(blockl)){
if(sum(blockl[[index]][[6]]==(off*2+set-length(sets)))){
present <- c(present, index)
}
}
start <- se[present,]
se_alt <- population$breeding[[16]][[1]][[off]][[set]] * 10000*5/3
founder_alt <- NULL
for(index in 1:length(population$breeding[[16]][[1]][[off]][[set+4]])){
founder_alt <- c(founder_alt,miraculix::decodeOrigins(population$breeding[[16]][[1]][[off]][[set+4]], row=index)[3])
}
for(index1 in 1:length(present)){
index <- present[index1]
polygon(c(se[index,1], se[index,2], se[index,2], se[index,1]), c(0.05,0.05,0.45,0.45)+off*length(sets)+set-length(sets)*2+1-(1*length(sets)==1),
col=adjustcolor(founder_info[index,6],alpha.f=1), lty=0)
}
for(index in 1:length(founder_alt)){
polygon(c(se_alt[index], se_alt[index+1], se_alt[index+1], se_alt[index]), c(0.55,0.55,0.95,0.95) + length(sets)*off +set-length(sets)*2+1-(1*length(sets)==1),
col=adjustcolor(founder_alt[index],alpha.f=1), lty=0)
}
}
}
dev.off()
}
length(blockl)
dim(haplos)
342/2
#blockl <- block_calculation(haplos, node_min = 5, edge_min = 5)
blockl <- block_calculation(haplos[,1:171*2], node_min = 5, edge_min = 5, target_coverage = 0.95)
blockl <- block_calculation(haplos, node_min = 5, edge_min = 5)
set.seed(7)
nindi <- 19
library(MoBPS) # MoBPS is available at https://github.com/tpook92/
# Alternatively use devtools::install_github("tpook92/MoBPS", subdir="pkg") to install
# Generate a base-population with 50k SNPs, 3 Morgan genome, fully homozgyous individuals
population <- creating.diploid(nindi=nindi, nsnp=50000, sex.quota = 0,
chromosome.length = 3, dataset="homorandom")
# Simulate matings between all founders
population <- breeding.diploid(population, breeding.size=c(nindi*(nindi-1)/2,0),
selection.size=c(nindi,0),
breeding.all.combination = TRUE,
mutation.rate=10^-4)
# Simulation of 4 generations of random mating of the prior generation
for(index in 1:4){
population <- breeding.diploid(population, breeding.size=c(nindi*(nindi-1)/2,0),
selection.size=c(nindi*(nindi-1)/2,0),
same.sex.activ = TRUE, same.sex.sex=0,
mutation.rate=10^-4)
}
# Simulation of 10 generations of self-fertilization
for(index in 1:10){
population <- breeding.diploid(population, breeding.size=c(nindi*(nindi-1)/2,0),
selection.size=c(nindi*(nindi-1)/2,0),
selfing.mating=TRUE, selfing.sex=0,
max.offspring = 1, mutation.rate=10^-4)
}
# Derive haplotypes of last generation and founders
haplos <- get.haplo(population, gen=16)
founderhaplo <- get.haplo(population, gen=1)[,1:nindi*2]
library(HaploBlocker)
#blockl <- block_calculation(haplos, node_min = 5, edge_min = 5)
blockl <- block_calculation(haplos, node_min = 5, edge_min = 5, target_coverage = 0.95)
#blockl <- block_calculation(haplos, node_min = 5, edge_min = 5, target_coverage = 0.95, adaptive_mode = TRUE)
se <- blocklist_startend(blockl)
mean(se[,2]-se[,1])
t <- coverage_test(blockl)
mean(t)
founder_info <- matrix(NA, nrow=length(blockl), ncol=6)
representation <- matrix(0, nrow=nrow(haplos), ncol=ncol(founderhaplo))
representation99 <- matrix(0, nrow=nrow(haplos), ncol=ncol(founderhaplo))
for(index in 1:length(blockl)){
start <- blockl[[index]][[2]]$snp
end <- blockl[[index]][[3]]$snp
concordance <- founderhaplo[start:end,]==blockl[[index]][[7]]$snp
overlap <- colSums(concordance) / (end-start+1)
founder_info[index, 1:2] <- c(which.max(overlap), max(overlap))
founder_info[index, 3:4] <- c(which.max(overlap[-founder_info[index,1]]), max(overlap[-founder_info[index,1]]))
if(founder_info[index,2]==1){
representation[start:end, founder_info[index,1]] <- representation[start:end,founder_info[index,1]] +1
}
if(founder_info[index,2]>=0.99){
representation99[start:end, founder_info[index,1]] <- representation99[start:end,founder_info[index,1]] +1
}
if(max(overlap)==1){
founder_info[index,5] <- which.max(overlap)[1]
}
if(max(overlap)>=0.99){
founder_info[index,6] <- which.max(overlap)[1]
}
}
mean(representation>0)
mean(representation99>0)
mean(founder_info[,2]>=1)
mean(founder_info[,2]>=0.99)
plot(founder_info[,2])
set.seed(7)
library(randomcoloR)
coloring <- distinctColorPalette(nindi)
{
png("C:/Users/pook/Desktop/Fig10.png", width=2250, height= 750, res=300)
par(mar=c(4.1,10.1,1.1,1.1))
firstn <- 5
sets <-  1
plot(-100000,0,ylim=c(0,firstn*length(sets)), xlim=c(0, max(start)), xlab="SNP", yaxt='n', ylab="")
axis(2, at=1:firstn-0.75, label=paste(c("est. founder: haplo "), 1:firstn), las=2)
axis(2, at=1:firstn-0.25, label=paste(c("real founder: haplo "), 1:firstn), las=2)
for(off in 1:firstn){
for(set in sets){
present <- NULL
for(index in 1:length(blockl)){
if(sum(blockl[[index]][[6]]==(off*2+set-length(sets)))){
present <- c(present, index)
}
}
start <- se[present,]
se_alt <- population$breeding[[16]][[1]][[off]][[set]] * 10000*5/3
founder_alt <- NULL
for(index in 1:length(population$breeding[[16]][[1]][[off]][[set+4]])){
founder_alt <- c(founder_alt,miraculix::decodeOrigins(population$breeding[[16]][[1]][[off]][[set+4]], row=index)[3])
}
for(index1 in 1:length(present)){
index <- present[index1]
polygon(c(se[index,1], se[index,2], se[index,2], se[index,1]), c(0.05,0.05,0.45,0.45)+off*length(sets)+set-length(sets)*2+1-(1*length(sets)==1),
col=coloring[founder_info[index,6]], lty=0)
}
for(index in 1:length(founder_alt)){
polygon(c(se_alt[index], se_alt[index+1], se_alt[index+1], se_alt[index]), c(0.55,0.55,0.95,0.95) + length(sets)*off +set-length(sets)*2+1-(1*length(sets)==1),
col=coloring[founder_alt[index]], lty=0)
}
}
}
dev.off()
}
{
png("C:/Users/pook/Desktop/Fig10.png", width=2250, height= 800, res=300)
par(mar=c(4.1,10.1,0.6,0.6))
firstn <- 5
sets <-  1
plot(-100000,0,ylim=c(0,firstn*length(sets)), xlim=c(0, max(start)), xlab="SNP", yaxt='n', ylab="")
axis(2, at=1:firstn-0.75, label=paste(c("est. founder: haplo "), 1:firstn), las=2)
axis(2, at=1:firstn-0.25, label=paste(c("real founder: haplo "), 1:firstn), las=2)
for(off in 1:firstn){
for(set in sets){
present <- NULL
for(index in 1:length(blockl)){
if(sum(blockl[[index]][[6]]==(off*2+set-length(sets)))){
present <- c(present, index)
}
}
start <- se[present,]
se_alt <- population$breeding[[16]][[1]][[off]][[set]] * 10000*5/3
founder_alt <- NULL
for(index in 1:length(population$breeding[[16]][[1]][[off]][[set+4]])){
founder_alt <- c(founder_alt,miraculix::decodeOrigins(population$breeding[[16]][[1]][[off]][[set+4]], row=index)[3])
}
for(index1 in 1:length(present)){
index <- present[index1]
polygon(c(se[index,1], se[index,2], se[index,2], se[index,1]), c(0.05,0.05,0.45,0.45)+off*length(sets)+set-length(sets)*2+1-(1*length(sets)==1),
col=coloring[founder_info[index,6]], lty=0)
}
for(index in 1:length(founder_alt)){
polygon(c(se_alt[index], se_alt[index+1], se_alt[index+1], se_alt[index]), c(0.55,0.55,0.95,0.95) + length(sets)*off +set-length(sets)*2+1-(1*length(sets)==1),
col=coloring[founder_alt[index]], lty=0)
}
}
}
dev.off()
png("C:/Users/pook/Desktop/Fig10_old.png", width=2250, height= 1000, res=300)
par(mar=c(4.1,10.1,1.1,1.1))
firstn <- 5
sets <-  1
plot(-100000,0,ylim=c(0,firstn*length(sets)), xlim=c(0, max(start)), xlab="SNP", yaxt='n', ylab="")
axis(2, at=1:firstn-0.75, label=paste(c("est. founder: haplo "), 1:firstn), las=2)
axis(2, at=1:firstn-0.25, label=paste(c("real founder: haplo "), 1:firstn), las=2)
for(off in 1:firstn){
for(set in sets){
present <- NULL
for(index in 1:length(blockl)){
if(sum(blockl[[index]][[6]]==(off*2+set-length(sets)))){
present <- c(present, index)
}
}
start <- se[present,]
se_alt <- population$breeding[[16]][[1]][[off]][[set]] * 10000*5/3
founder_alt <- NULL
for(index in 1:length(population$breeding[[16]][[1]][[off]][[set+4]])){
founder_alt <- c(founder_alt,miraculix::decodeOrigins(population$breeding[[16]][[1]][[off]][[set+4]], row=index)[3])
}
for(index1 in 1:length(present)){
index <- present[index1]
polygon(c(se[index,1], se[index,2], se[index,2], se[index,1]), c(0.05,0.05,0.45,0.45)+off*length(sets)+set-length(sets)*2+1-(1*length(sets)==1),
col=adjustcolor(founder_info[index,6],alpha.f=1), lty=0)
}
for(index in 1:length(founder_alt)){
polygon(c(se_alt[index], se_alt[index+1], se_alt[index+1], se_alt[index]), c(0.55,0.55,0.95,0.95) + length(sets)*off +set-length(sets)*2+1-(1*length(sets)==1),
col=adjustcolor(founder_alt[index],alpha.f=1), lty=0)
}
}
}
dev.off()
}
set.seed(7)
library(randomcoloR)
coloring <- distinctColorPalette(nindi)
{
png("C:/Users/pook/Desktop/Fig10.png", width=2250, height= 800, res=300)
par(mar=c(4.1,10.1,0.6,0.6))
firstn <- 5
sets <-  1
plot(-100000,0,ylim=c(0,firstn*length(sets)), xlim=c(0, max(start)), xlab="SNP", yaxt='n', ylab="")
axis(2, at=1:firstn-0.75, label=paste(c("est. founder: haplo "), 1:firstn), las=2)
axis(2, at=1:firstn-0.25, label=paste(c("real founder: haplo "), 1:firstn), las=2)
for(off in 1:firstn){
for(set in sets){
present <- NULL
for(index in 1:length(blockl)){
if(sum(blockl[[index]][[6]]==(off*2+set-length(sets)))){
present <- c(present, index)
}
}
start <- se[present,]
se_alt <- population$breeding[[16]][[1]][[off]][[set]] * 10000*5/3
founder_alt <- NULL
for(index in 1:length(population$breeding[[16]][[1]][[off]][[set+4]])){
founder_alt <- c(founder_alt,miraculix::decodeOrigins(population$breeding[[16]][[1]][[off]][[set+4]], row=index)[3])
}
for(index1 in 1:length(present)){
index <- present[index1]
polygon(c(se[index,1], se[index,2], se[index,2], se[index,1]), c(0.05,0.05,0.45,0.45)+off*length(sets)+set-length(sets)*2+1-(1*length(sets)==1),
col=coloring[founder_info[index,6]], lty=0)
}
for(index in 1:length(founder_alt)){
polygon(c(se_alt[index], se_alt[index+1], se_alt[index+1], se_alt[index]), c(0.55,0.55,0.95,0.95) + length(sets)*off +set-length(sets)*2+1-(1*length(sets)==1),
col=coloring[founder_alt[index]], lty=0)
}
}
}
dev.off()
png("C:/Users/pook/Desktop/Fig10_old.png", width=2250, height= 1000, res=300)
par(mar=c(4.1,10.1,1.1,1.1))
firstn <- 5
sets <-  1
plot(-100000,0,ylim=c(0,firstn*length(sets)), xlim=c(0, max(start)), xlab="SNP", yaxt='n', ylab="")
axis(2, at=1:firstn-0.75, label=paste(c("est. founder: haplo "), 1:firstn), las=2)
axis(2, at=1:firstn-0.25, label=paste(c("real founder: haplo "), 1:firstn), las=2)
for(off in 1:firstn){
for(set in sets){
present <- NULL
for(index in 1:length(blockl)){
if(sum(blockl[[index]][[6]]==(off*2+set-length(sets)))){
present <- c(present, index)
}
}
start <- se[present,]
se_alt <- population$breeding[[16]][[1]][[off]][[set]] * 10000*5/3
founder_alt <- NULL
for(index in 1:length(population$breeding[[16]][[1]][[off]][[set+4]])){
founder_alt <- c(founder_alt,miraculix::decodeOrigins(population$breeding[[16]][[1]][[off]][[set+4]], row=index)[3])
}
for(index1 in 1:length(present)){
index <- present[index1]
polygon(c(se[index,1], se[index,2], se[index,2], se[index,1]), c(0.05,0.05,0.45,0.45)+off*length(sets)+set-length(sets)*2+1-(1*length(sets)==1),
col=adjustcolor(founder_info[index,6],alpha.f=1), lty=0)
}
for(index in 1:length(founder_alt)){
polygon(c(se_alt[index], se_alt[index+1], se_alt[index+1], se_alt[index]), c(0.55,0.55,0.95,0.95) + length(sets)*off +set-length(sets)*2+1-(1*length(sets)==1),
col=adjustcolor(founder_alt[index],alpha.f=1), lty=0)
}
}
}
dev.off()
}
set.seed(7)
coloring <- distinctColorPalette(nindi)
{
png("C:/Users/pook/Desktop/Fig10.png", width=2250, height= 800, res=300)
par(mar=c(4.1,10.1,0.6,0.6))
firstn <- 5
sets <-  1
plot(-100000,0,ylim=c(0,firstn*length(sets)), xlim=c(0, max(start)), xlab="SNP", yaxt='n', ylab="")
axis(2, at=1:firstn-0.75, label=paste(c("est. founder: haplo "), 1:firstn), las=2)
axis(2, at=1:firstn-0.25, label=paste(c("real founder: haplo "), 1:firstn), las=2)
for(off in 1:firstn){
for(set in sets){
present <- NULL
for(index in 1:length(blockl)){
if(sum(blockl[[index]][[6]]==(off*2+set-length(sets)))){
present <- c(present, index)
}
}
start <- se[present,]
se_alt <- population$breeding[[16]][[1]][[off]][[set]] * 10000*5/3
founder_alt <- NULL
for(index in 1:length(population$breeding[[16]][[1]][[off]][[set+4]])){
founder_alt <- c(founder_alt,miraculix::decodeOrigins(population$breeding[[16]][[1]][[off]][[set+4]], row=index)[3])
}
for(index1 in 1:length(present)){
index <- present[index1]
polygon(c(se[index,1], se[index,2], se[index,2], se[index,1]), c(0.05,0.05,0.45,0.45)+off*length(sets)+set-length(sets)*2+1-(1*length(sets)==1),
col=coloring[founder_info[index,6]], lty=0)
}
for(index in 1:length(founder_alt)){
polygon(c(se_alt[index], se_alt[index+1], se_alt[index+1], se_alt[index]), c(0.55,0.55,0.95,0.95) + length(sets)*off +set-length(sets)*2+1-(1*length(sets)==1),
col=coloring[founder_alt[index]], lty=0)
}
}
}
dev.off()
png("C:/Users/pook/Desktop/Fig10_old.png", width=2250, height= 1000, res=300)
par(mar=c(4.1,10.1,1.1,1.1))
firstn <- 5
sets <-  1
plot(-100000,0,ylim=c(0,firstn*length(sets)), xlim=c(0, max(start)), xlab="SNP", yaxt='n', ylab="")
axis(2, at=1:firstn-0.75, label=paste(c("est. founder: haplo "), 1:firstn), las=2)
axis(2, at=1:firstn-0.25, label=paste(c("real founder: haplo "), 1:firstn), las=2)
for(off in 1:firstn){
for(set in sets){
present <- NULL
for(index in 1:length(blockl)){
if(sum(blockl[[index]][[6]]==(off*2+set-length(sets)))){
present <- c(present, index)
}
}
start <- se[present,]
se_alt <- population$breeding[[16]][[1]][[off]][[set]] * 10000*5/3
founder_alt <- NULL
for(index in 1:length(population$breeding[[16]][[1]][[off]][[set+4]])){
founder_alt <- c(founder_alt,miraculix::decodeOrigins(population$breeding[[16]][[1]][[off]][[set+4]], row=index)[3])
}
for(index1 in 1:length(present)){
index <- present[index1]
polygon(c(se[index,1], se[index,2], se[index,2], se[index,1]), c(0.05,0.05,0.45,0.45)+off*length(sets)+set-length(sets)*2+1-(1*length(sets)==1),
col=adjustcolor(founder_info[index,6],alpha.f=1), lty=0)
}
for(index in 1:length(founder_alt)){
polygon(c(se_alt[index], se_alt[index+1], se_alt[index+1], se_alt[index]), c(0.55,0.55,0.95,0.95) + length(sets)*off +set-length(sets)*2+1-(1*length(sets)==1),
col=adjustcolor(founder_alt[index],alpha.f=1), lty=0)
}
}
}
dev.off()
}
population$breeding[[16]][[1]]
population$breeding[[16]][[1]][[1]]
# use MoBPS::get.recombi to extract point of recombination
get.recombi(population, gen=1)
get.recombi
# use MoBPS::get.recombi to extract point of recombination
get.recombi(population, gen=1)
database <- NULL
cohorts <- NULL
gen <- 1
database <- get.database(population, gen, database, cohorts)
n.animals <- sum(database[,4] - database[,3] +1)
data <- list()
rindex <- 1
for(row in 1:nrow(database)){
animals <- database[row,]
for(index in database[row,3]:database[row,4]){
data[[rindex]] <-  list()
colnamed <- paste(if(animals[2]==1) "M" else "W", index,"_", animals[1],sep="")
data[[rindex]][[1]] <- population$breeding[[animals[1]]][[animals[2]]][[index]][[1]]
data[[rindex]][[2]] <- population$breeding[[animals[1]]][[animals[2]]][[index]][[2]]
if(population$info$miraculix){
if (requireNamespace("miraculix", quietly = TRUE)) {
decode <- miraculix::decodeOrigins
} else{
decode <- decodeOriginsR
}
} else{
decode <- decodeOriginsR
}
if(population$info$miraculix){
male_ori <- matrix(0, nrow=length(population$breeding[[animals[1]]][[animals[2]]][[index]][[5]]), ncol=4)
female_ori <- matrix(0, nrow=length(population$breeding[[animals[1]]][[animals[2]]][[index]][[6]]), ncol=4)
for(index2 in 1:nrow(male_ori)){
male_ori[index2,] <- decode(population$breeding[[animals[1]]][[animals[2]]][[index]][[5]],index2)
}
for(index2 in 1:nrow(female_ori)){
female_ori[index2,] <- decode(population$breeding[[animals[1]]][[animals[2]]][[index]][[6]],index2)
}
data[[rindex]][[3]] <- male_ori
data[[rindex]][[4]] <- female_ori
} else{
data[[rindex]][[3]] <- matrix(decode(population$breeding[[animals[1]]][[animals[2]]][[index]][[5]]), byrow=FALSE, ncol=4)
data[[rindex]][[4]] <- matrix(decode(population$breeding[[animals[1]]][[animals[2]]][[index]][[6]]), byrow=FALSE, ncol=4)
}
data[[rindex]][[5]] <- colnamed
rindex <- rindex + 1
}
}
animals
data
get.recombi(population, gen=16)
get.recombi(population, database=cbind(16,1))
get.recombi(population, database=cbind(2,1))
# Extract points of recombination for final generation in MoBPS:
recombination <- get.recombi(population, gen=16)
# Compare founder haplotypes to haplotype blocks:
start <- blockl[[1]][[2]]$snp
end <- blockl[[1]][[3]]$snp
concordance <- founderhaplo[start:end,]==blockl[[1]][[7]]$snp
concordance
concordance <- rowMeans(founderhaplo[start:end,]==blockl[[1]][[7]]$snp)
concordance
concordance <- colMeans(founderhaplo[start:end,]==blockl[[1]][[7]]$snp)
concordance
recombination[[1]]
recombination
# Extract points of recombination for final generation in MoBPS:
recombination <- get.recombi(population, gen=16)
data[[1]]
# Extract points of recombination for final generation in MoBPS:
recombination <- get.recombi(population, gen=16)
# Extract points of recombination for final generation in MoBPS:
recombination <- get.recombi(population, database=cbind(16,1))
recombination[[1]]
coloring[10]
coloring[1]
plot(1,1, col=coloring[10])
plot(1,1, col=coloring[1])
plot(1,1, col=coloring[10])
