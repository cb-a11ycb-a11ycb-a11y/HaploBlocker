founder_alt <- c(founder_alt,miraculix::decodeOrigins(population$breeding[[16]][[1]][[off]][[set+4]], row=index)[3])
}
for(index1 in 1:length(present)){
index <- present[index1]
polygon(c(se[index,1], se[index,2], se[index,2], se[index,1]), c(0.05,0.05,0.45,0.45)+off*length(sets)+set-length(sets)*2+1-(1*length(sets)==1),
col=coloring[founder_info[index,6]], lty=0)
}
for(index in 1:length(founder_alt)){
polygon(c(se_alt[index], se_alt[index+1], se_alt[index+1], se_alt[index]), c(0.55,0.55,0.95,0.95) + length(sets)*off +set-length(sets)*2+1-(1*length(sets)==1),
col=coloring[founder_alt[index]], lty=0)
}
}
}
dev.off()
png("C:/Users/pook/Desktop/Fig10_old.png", width=2250, height= 1000, res=300)
par(mar=c(4.1,10.1,1.1,1.1))
firstn <- 5
sets <-  1
plot(-100000,0,ylim=c(0,firstn*length(sets)), xlim=c(0, max(start)), xlab="SNP", yaxt='n', ylab="")
axis(2, at=1:firstn-0.75, label=paste(c("est. founder: haplo "), 1:firstn), las=2)
axis(2, at=1:firstn-0.25, label=paste(c("real founder: haplo "), 1:firstn), las=2)
for(off in 1:firstn){
for(set in sets){
present <- NULL
for(index in 1:length(blockl)){
if(sum(blockl[[index]][[6]]==(off*2+set-length(sets)))){
present <- c(present, index)
}
}
start <- se[present,]
se_alt <- population$breeding[[16]][[1]][[off]][[set]] * 10000*5/3
founder_alt <- NULL
for(index in 1:length(population$breeding[[16]][[1]][[off]][[set+4]])){
founder_alt <- c(founder_alt,miraculix::decodeOrigins(population$breeding[[16]][[1]][[off]][[set+4]], row=index)[3])
}
for(index1 in 1:length(present)){
index <- present[index1]
polygon(c(se[index,1], se[index,2], se[index,2], se[index,1]), c(0.05,0.05,0.45,0.45)+off*length(sets)+set-length(sets)*2+1-(1*length(sets)==1),
col=adjustcolor(founder_info[index,6],alpha.f=1), lty=0)
}
for(index in 1:length(founder_alt)){
polygon(c(se_alt[index], se_alt[index+1], se_alt[index+1], se_alt[index]), c(0.55,0.55,0.95,0.95) + length(sets)*off +set-length(sets)*2+1-(1*length(sets)==1),
col=adjustcolor(founder_alt[index],alpha.f=1), lty=0)
}
}
}
dev.off()
}
set.seed(7)
coloring <- distinctColorPalette(nindi)
{
png("C:/Users/pook/Desktop/Fig10.png", width=2250, height= 800, res=300)
par(mar=c(4.1,10.1,0.6,0.6))
firstn <- 5
sets <-  1
plot(-100000,0,ylim=c(0,firstn*length(sets)), xlim=c(0, max(start)), xlab="SNP", yaxt='n', ylab="")
axis(2, at=1:firstn-0.75, label=paste(c("est. founder: haplo "), 1:firstn), las=2)
axis(2, at=1:firstn-0.25, label=paste(c("real founder: haplo "), 1:firstn), las=2)
for(off in 1:firstn){
for(set in sets){
present <- NULL
for(index in 1:length(blockl)){
if(sum(blockl[[index]][[6]]==(off*2+set-length(sets)))){
present <- c(present, index)
}
}
start <- se[present,]
se_alt <- population$breeding[[16]][[1]][[off]][[set]] * 10000*5/3
founder_alt <- NULL
for(index in 1:length(population$breeding[[16]][[1]][[off]][[set+4]])){
founder_alt <- c(founder_alt,miraculix::decodeOrigins(population$breeding[[16]][[1]][[off]][[set+4]], row=index)[3])
}
for(index1 in 1:length(present)){
index <- present[index1]
polygon(c(se[index,1], se[index,2], se[index,2], se[index,1]), c(0.05,0.05,0.45,0.45)+off*length(sets)+set-length(sets)*2+1-(1*length(sets)==1),
col=coloring[founder_info[index,6]], lty=0)
}
for(index in 1:length(founder_alt)){
polygon(c(se_alt[index], se_alt[index+1], se_alt[index+1], se_alt[index]), c(0.55,0.55,0.95,0.95) + length(sets)*off +set-length(sets)*2+1-(1*length(sets)==1),
col=coloring[founder_alt[index]], lty=0)
}
}
}
dev.off()
png("C:/Users/pook/Desktop/Fig10_old.png", width=2250, height= 1000, res=300)
par(mar=c(4.1,10.1,1.1,1.1))
firstn <- 5
sets <-  1
plot(-100000,0,ylim=c(0,firstn*length(sets)), xlim=c(0, max(start)), xlab="SNP", yaxt='n', ylab="")
axis(2, at=1:firstn-0.75, label=paste(c("est. founder: haplo "), 1:firstn), las=2)
axis(2, at=1:firstn-0.25, label=paste(c("real founder: haplo "), 1:firstn), las=2)
for(off in 1:firstn){
for(set in sets){
present <- NULL
for(index in 1:length(blockl)){
if(sum(blockl[[index]][[6]]==(off*2+set-length(sets)))){
present <- c(present, index)
}
}
start <- se[present,]
se_alt <- population$breeding[[16]][[1]][[off]][[set]] * 10000*5/3
founder_alt <- NULL
for(index in 1:length(population$breeding[[16]][[1]][[off]][[set+4]])){
founder_alt <- c(founder_alt,miraculix::decodeOrigins(population$breeding[[16]][[1]][[off]][[set+4]], row=index)[3])
}
for(index1 in 1:length(present)){
index <- present[index1]
polygon(c(se[index,1], se[index,2], se[index,2], se[index,1]), c(0.05,0.05,0.45,0.45)+off*length(sets)+set-length(sets)*2+1-(1*length(sets)==1),
col=adjustcolor(founder_info[index,6],alpha.f=1), lty=0)
}
for(index in 1:length(founder_alt)){
polygon(c(se_alt[index], se_alt[index+1], se_alt[index+1], se_alt[index]), c(0.55,0.55,0.95,0.95) + length(sets)*off +set-length(sets)*2+1-(1*length(sets)==1),
col=adjustcolor(founder_alt[index],alpha.f=1), lty=0)
}
}
}
dev.off()
}
library(HaploBlocker)
setwd("C:/Users/pook/Desktop/")
train_merge <- NULL
test_merge <- NULL
for(index in 1:20){
load(paste0("Block_GP_24_04_19/file",index,".RData"))
train_merge <- cbind(train_merge, training_cor)
test_merge <- cbind(test_merge, test_cor)
}
par(mar=c(4.1,4.1,0.6,0.6))
boxplot(t(test_merge), col=c("red", "brown", "blue"), xaxt="n")
pheno <- as.matrix(read.table("Genetic_Datasets/MAZE_BLUEs_acrossLocations_DHperse2017_v1.csv", sep=";"))[1,-1]
pheno[5] <- "PH_V4"
pheno[6] <- "PH_V6"
axis(1, at=seq(2,27, by=3), label=as.character(pheno))
legend("topleft", c("full SNP-dataset", "pruned SNP-Dataset", "Block-dataset"), fill=c("red", "brown", "blue"))
dev.off()
par(mar=c(4.1,4.1,0.6,0.6))
boxplot(t(test_merge), col=c("red", "brown", "blue"), xaxt="n")
?boxplot
boxplot(t(test_merge), col=c("red", "brown", "blue"), xaxt="n", at=1:27)
boxplot(t(test_merge), col=c("red", "brown", "blue"), xaxt="n", at=c(1:26,28))
par(mar=c(4.1,4.1,0.6,0.6))
boxplot(t(test_merge), col=c("red", "brown", "blue"), xaxt="n", at=1:27+rep(1:9,each=1))
1:27+rep(1:9,each=1)
boxplot(t(test_merge), col=c("red", "brown", "blue"), xaxt="n", at=1:27+rep(1:9,each=3))
pheno <- as.matrix(read.table("Genetic_Datasets/MAZE_BLUEs_acrossLocations_DHperse2017_v1.csv", sep=";"))[1,-1]
pheno[5] <- "PH_V4"
1:27+rep(1:9,each=3)
par(mar=c(4.1,4.1,0.6,0.6))
boxplot(t(test_merge), col=c("red", "brown", "blue"), xaxt="n", at=1:27+rep(1:9,each=3))
pheno <- as.matrix(read.table("Genetic_Datasets/MAZE_BLUEs_acrossLocations_DHperse2017_v1.csv", sep=";"))[1,-1]
pheno[5] <- "PH_V4"
pheno[6] <- "PH_V6"
axis(1, at=seq(2,36, by=4), label=as.character(pheno))
legend("topleft", c("full SNP-dataset", "pruned SNP-Dataset", "Block-dataset"), fill=c("red", "brown", "blue"))
png(file="C:/Users/pook/Desktop/GP_comparison_block.png", width=3250, height= 1160, res=300)
par(mar=c(4.1,4.1,0.6,0.6))
boxplot(t(test_merge), col=c("red", "brown", "blue"), xaxt="n", at=1:27+rep(1:9,each=3))
pheno <- as.matrix(read.table("Genetic_Datasets/MAZE_BLUEs_acrossLocations_DHperse2017_v1.csv", sep=";"))[1,-1]
pheno[5] <- "PH_V4"
pheno[6] <- "PH_V6"
axis(1, at=seq(2,36, by=4), label=as.character(pheno))
legend("topleft", c("full SNP-dataset", "pruned SNP-Dataset", "Block-dataset"), fill=c("red", "brown", "blue"))
dev.off()
setwd("C:/Users/pook/Desktop/")
train_merge <- NULL
test_merge <- NULL
for(index in 1:20){
load(paste0("Block_GP_24_04_19/file",index,"_PE.RData"))
train_merge <- cbind(train_merge, training_cor)
test_merge <- cbind(test_merge, test_cor)
}
legend("topleft", c("full SNP-dataset", "pruned SNP-Dataset", "Block-dataset"), fill=c("red", "darkgreen", "blue"))
setwd("C:/Users/pook/Desktop/")
train_merge <- NULL
test_merge <- NULL
for(index in 1:20){
load(paste0("Block_GP_24_04_19/file",index,".RData"))
train_merge <- cbind(train_merge, training_cor)
test_merge <- cbind(test_merge, test_cor)
}
png(file="C:/Users/pook/Desktop/GP_comparison_block.png", width=3250, height= 1160, res=300)
par(mar=c(4.1,4.1,0.6,0.6))
boxplot(t(test_merge), col=c("red", "darkgreen", "blue"), xaxt="n", at=1:27+rep(1:9,each=3))
pheno <- as.matrix(read.table("Genetic_Datasets/MAZE_BLUEs_acrossLocations_DHperse2017_v1.csv", sep=";"))[1,-1]
pheno[5] <- "PH_V4"
pheno[6] <- "PH_V6"
axis(1, at=seq(2,36, by=4), label=as.character(pheno))
legend("topleft", c("full SNP-dataset", "pruned SNP-Dataset", "Block-dataset"), fill=c("red", "darkgreen", "blue"))
dev.off()
setwd("C:/Users/pook/Desktop/")
train_merge <- NULL
test_merge <- NULL
for(index in 1:20){
load(paste0("Block_GP_24_04_19/file",index,"_PE.RData"))
train_merge <- cbind(train_merge, training_cor)
test_merge <- cbind(test_merge, test_cor)
}
png(file="C:/Users/pook/Desktop/GP_comparison_block_PE.png", width=3250, height= 1160, res=300)
par(mar=c(4.1,4.1,0.6,0.6))
boxplot(t(test_merge), col=c("red", "darkgreen", "blue"), xaxt="n", at=1:27+rep(1:9,each=3))
pheno <- as.matrix(read.table("Genetic_Datasets/MAZE_BLUEs_acrossLocations_DHperse2017_v1.csv", sep=";"))[1,-1]
pheno[5] <- "PH_V4"
pheno[6] <- "PH_V6"
axis(1, at=seq(2,36, by=4), label=as.character(pheno))
legend("topleft", c("full SNP-dataset", "pruned SNP-Dataset", "Block-dataset"), fill=c("red", "darkgreen", "blue"))
dev.off()
train_merge <- NULL
test_merge <- NULL
for(index in 1:50){
load(paste0("Block_GP_24_04_19/file",index,"_weighted.RData"))
train_merge <- cbind(train_merge, training_cor)
test_merge <- cbind(test_merge, test_cor)
}
par(mar=c(4.1,4.1,0.6,0.6))
plot(seq(-0.5,1.5,by=0.1), rowMeans(test_merge)[c(20,20:1)], ylim=c(min(rowMeans(test_merge)), max(rowMeans(test_merge))),
type="l", xlab="s", ylab="avg. prediction accuracy")
take <- which.max(rowMeans(test_merge)[c(20,20:1)])
points(seq(-0.5,1.5,by=0.1)[take], rowMeans(test_merge)[c(20,20:1)][take], col="red")
for(t in 1:8){
lines(seq(-0.5,1.5,by=0.1), rowMeans(test_merge)[20:0+t*21])
take <- which.max(rowMeans(test_merge)[20:0+t*21])
points(seq(-0.5,1.5,by=0.1)[take], rowMeans(test_merge)[20:0+t*21][take], col="red")
}
dev.off()
setwd("C:/Users/pook/Desktop/")
train_merge <- NULL
test_merge <- NULL
for(index in 1:50){
load(paste0("Block_GP_24_04_19/file",index,"_weighted.RData"))
train_merge <- cbind(train_merge, training_cor)
test_merge <- cbind(test_merge, test_cor)
}
png(file="C:/Users/pook/Desktop/GP_weighting_block.png", width=2250, height= 1160, res=300)
par(mar=c(4.1,4.1,0.6,0.6))
plot(seq(-0.5,1.5,by=0.1), rowMeans(test_merge)[c(20,20:1)], ylim=c(min(rowMeans(test_merge)), max(rowMeans(test_merge))),
type="l", xlab="s", ylab="avg. prediction accuracy")
take <- which.max(rowMeans(test_merge)[c(20,20:1)])
points(seq(-0.5,1.5,by=0.1)[take], rowMeans(test_merge)[c(20,20:1)][take], col="red")
for(t in 1:8){
lines(seq(-0.5,1.5,by=0.1), rowMeans(test_merge)[20:0+t*21])
take <- which.max(rowMeans(test_merge)[20:0+t*21])
points(seq(-0.5,1.5,by=0.1)[take], rowMeans(test_merge)[20:0+t*21][take], col="red")
}
dev.off()
setwd("C:/Users/pook/Desktop/")
train_merge <- NULL
test_merge <- NULL
for(index in 1:50){
load(paste0("Block_GP_24_04_19/file",index,"_weighted_PE.RData"))
train_merge <- cbind(train_merge, training_cor)
test_merge <- cbind(test_merge, test_cor)
}
png(file="C:/Users/pook/Desktop/GP_weighting_PE_block.png", width=2250, height= 1160, res=300)
par(mar=c(4.1,4.1,0.6,0.6))
plot(seq(-0.5,1.5,by=0.1), rowMeans(test_merge)[c(20,20:1)], ylim=c(min(rowMeans(test_merge)), max(rowMeans(test_merge))),
type="l", xlab="s", ylab="avg. prediction accuracy")
take <- which.max(rowMeans(test_merge)[c(20,20:1)])
points(seq(-0.5,1.5,by=0.1)[take], rowMeans(test_merge)[c(20,20:1)][take], col="red")
for(t in 1:8){
lines(seq(-0.5,1.5,by=0.1), rowMeans(test_merge)[20:0+t*21])
take <- which.max(rowMeans(test_merge)[20:0+t*21])
points(seq(-0.5,1.5,by=0.1)[take], rowMeans(test_merge)[20:0+t*21][take], col="red")
}
dev.off()
library(HaploBlocker)
load("C:/Users/pook/Desktop/prediction_acc.RData")
join <- rbind(acc_test_chip, acc_test_code, acc_test_blocker)[rep(c(1,10,19),9) + sort(rep(0:8,3)),]
X11()
boxplot(t(join), col=c("red", "blue", "green"))
legend("topleft", c("SNP", "NRGene", "HaploB"), col=c("red", "blue", "green"), lty=c(1,1,1))
lines <- scan("NRGene_MAZE_sequence/haplotypes_similarity_B73_coords.vcf", nlines=1, what="character", skip=6)
### Dataset generation - NRGENE
setwd("C:/Users/pook/Desktop/")
chromo <- 10
load(paste0("Genetic_Datasets/Batch3_KEPE/PE_DH_chromo", chromo, ".RData"))
blocklist <- block_calcaluation(data)
################## HaploBlocker ###############################
library(HaploBlocker)
blocklist <- block_calcaluation(data)
################## HaploBlocker ###############################
library(HaploBlocker)
blocklist <- block_calculation(data)
block_data <- block_matrix_construction(blocklist)
dim(block_data)
window_data <- block_windowdataset(blocklist)
dim(window_data)
window_data2 <- block_windowdataset(blocklist, consider_nonblock = TRUE)
window_data2 <- block_windowdataset(blocklist, data, consider_nonblock = TRUE)
dim(window_data2)
block_data
storage.mode(geno_blocker)
storage.mode(block_data)
storage.mode(window_data)
storage.mode(window_data2)
length(blocklist)
a <- block_calculation(ex_maze)
plot_block(a, orientation="front")
library(HaploBlocker)
plot_block(a, orientation="front")
library(HaploBlocker)
storage.mode(geno_code2) <- "integer"
library(miraculix)
?mmer
setwd("C:/Users/pook/Desktop/R-Stuff/")
train_merge <- NULL
test_merge <- NULL
for(index in 1:20){
load(paste0("Block_GP_24_04_19/file",index,".RData"))
train_merge <- cbind(train_merge, training_cor)
test_merge <- cbind(test_merge, test_cor)
}
setwd("C:/Users/pook/Desktop/")
train_merge <- NULL
test_merge <- NULL
for(index in 1:20){
load(paste0("Block_GP_24_04_19/file",index,".RData"))
train_merge <- cbind(train_merge, training_cor)
test_merge <- cbind(test_merge, test_cor)
}
setwd("C:/Users/pook/Desktop/Doktorarbeit_bucket/")
train_merge <- NULL
test_merge <- NULL
for(index in 1:20){
load(paste0("Block_GP_24_04_19/file",index,".RData"))
train_merge <- cbind(train_merge, training_cor)
test_merge <- cbind(test_merge, test_cor)
}
train_merge
test_merge
train_merge <- NULL
test_merge <- NULL
for(index in 1:20){
load(paste0("Block_GP_24_04_19/file",index,"_PE.RData"))
train_merge <- cbind(train_merge, training_cor)
test_merge <- cbind(test_merge, test_cor)
}
png(file="C:/Users/pook/Desktop/GP_comparison_block_PE.png", width=3250, height= 1160, res=300)
par(mar=c(4.1,4.1,0.6,0.6))
boxplot(t(test_merge), col=c("red", "darkgreen", "blue"), xaxt="n", at=1:27+rep(1:9,each=3))
pheno <- as.matrix(read.table("Genetic_Datasets/MAZE_BLUEs_acrossLocations_DHperse2017_v1.csv", sep=";"))[1,-1]
pheno[5] <- "PH_V4"
pheno[6] <- "PH_V6"
axis(1, at=seq(2,36, by=4), label=as.character(pheno))
legend("topleft", c("full SNP-dataset", "pruned SNP-Dataset", "Block-dataset"), fill=c("red", "darkgreen", "blue"))
dev.off()
train_merge
test_merge
rowMeans(test_merge)
train_merge <- NULL
test_merge <- NULL
for(index in 1:50){
load(paste0("Block_GP_24_04_19/file",index,"_weighted_PE.RData"))
train_merge <- cbind(train_merge, training_cor)
test_merge <- cbind(test_merge, test_cor)
}
rowMeans(test_merge)
plot(test_merge)
t <- 7
plot(seq(-0.5,1.5,by=0.1), rowMeans(test_merge)[c(20,20:1)], ylim=c(min(rowMeans(test_merge)), max(rowMeans(test_merge))),
type="l", xlab="s", ylab="avg. prediction accuracy")
take <- which.max(rowMeans(test_merge)[c(20,20:1)])
points(seq(-0.5,1.5,by=0.1)[take], rowMeans(test_merge)[c(20,20:1)][take], col="red")
for(t in 1:8){
lines(seq(-0.5,1.5,by=0.1), rowMeans(test_merge)[20:0+t*21])
take <- which.max(rowMeans(test_merge)[20:0+t*21])
points(seq(-0.5,1.5,by=0.1)[take], rowMeans(test_merge)[20:0+t*21][take], col="red")
}
dev.off()
par(mar=c(4.1,4.1,0.6,0.6))
plot(seq(-0.5,1.5,by=0.1), rowMeans(test_merge)[c(20,20:1)], ylim=c(min(rowMeans(test_merge)), max(rowMeans(test_merge))),
type="l", xlab="s", ylab="avg. prediction accuracy")
take <- which.max(rowMeans(test_merge)[c(20,20:1)])
points(seq(-0.5,1.5,by=0.1)[take], rowMeans(test_merge)[c(20,20:1)][take], col="red")
for(t in 1:8){
lines(seq(-0.5,1.5,by=0.1), rowMeans(test_merge)[20:0+t*21])
take <- which.max(rowMeans(test_merge)[20:0+t*21])
points(seq(-0.5,1.5,by=0.1)[take], rowMeans(test_merge)[20:0+t*21][take], col="red")
}
t <- 6
lines(seq(-0.5,1.5,by=0.1), rowMeans(test_merge)[20:0+t*21])
take <- which.max(rowMeans(test_merge)[20:0+t*21])
points(seq(-0.5,1.5,by=0.1)[take], rowMeans(test_merge)[20:0+t*21][take], col="red")
rowMeans(test_merge)[20:0+t*21]
lines(seq(-0.5,1.5,by=0.1), rowMeans(test_merge)[20:0+t*21])
plot(seq(-0.5,1.5,by=0.1), rowMeans(test_merge)[20:0+t*21])
t <- 7
plot(seq(-0.5,1.5,by=0.1), rowMeans(test_merge)[20:0+t*21])
t <- 6
plot(seq(-0.5,1.5,by=0.1), rowMeans(test_merge)[20:0+t*21])
points(seq(-0.5,1.5,by=0.1)[take], rowMeans(test_merge)[c(20,20:1)][take], col="red")
plot(seq(-0.5,1.5,by=0.1), rowMeans(test_merge)[c(20,20:1)], ylim=c(min(rowMeans(test_merge)), max(rowMeans(test_merge))),
type="l", xlab="s", ylab="avg. prediction accuracy")
take <- which.max(rowMeans(test_merge)[c(20,20:1)])
points(seq(-0.5,1.5,by=0.1)[take], rowMeans(test_merge)[c(20,20:1)][take], col="red")
for(t in 1:8){
lines(seq(-0.5,1.5,by=0.1), rowMeans(test_merge)[20:0+t*21])
take <- which.max(rowMeans(test_merge)[20:0+t*21])
points(seq(-0.5,1.5,by=0.1)[take], rowMeans(test_merge)[20:0+t*21][take], col="red")
}
which.max(rowMeans(test_merge))
t <- 5
plot(seq(-0.5,1.5,by=0.1), rowMeans(test_merge)[c(20,20:1)], ylim=c(min(rowMeans(test_merge)), max(rowMeans(test_merge))),
type="l", xlab="s", ylab="avg. prediction accuracy")
lines(seq(-0.5,1.5,by=0.1), rowMeans(test_merge)[20:0+t*21])
rowMeans(test_merge)
seq(-0.5,1.5,by=0.1)[take]
rowMeans(test_merge)[20:0+t*21][take]
take
seq(-0.5,1.5,by=0.1)[6]
rowMeans(test_merge)[20:0+t*21][6]
setwd("C:/Users/pook/Desktop/Doktorarbeit_bucket/")
train_merge <- NULL
test_merge <- NULL
for(index in 1:20){
load(paste0("Block_GP_24_04_19/file",index,"_crossKEPE.RData"))
train_merge <- cbind(train_merge, training_cor)
test_merge <- cbind(test_merge, test_cor)
}
par(mar=c(4.1,4.1,0.6,0.6))
boxplot(t(test_merge), col=c("red", "brown", "blue"), xaxt="n")
par(mar=c(4.1,4.1,0.6,0.6))
boxplot(t(test_merge), col=c("red", "darkgreen", "blue"), xaxt="n", at=1:27+rep(1:9,each=3))
pheno <- as.matrix(read.table("Genetic_Datasets/MAZE_BLUEs_acrossLocations_DHperse2017_v1.csv", sep=";"))[1,-1]
pheno[5] <- "PH_V4"
pheno <- as.matrix(read.table("C:/Users/pook/Desktop/Genetic_Datasets/MAZE_BLUEs_acrossLocations_DHperse2017_v1.csv", sep=";"))[1,-1]
pheno[5] <- "PH_V4"
pheno[6] <- "PH_V6"
axis(1, at=seq(2,36, by=4), label=as.character(pheno))
png(file="C:/Users/pook/Desktop/GP_comparison_block_crossKEPE.png", width=3250, height= 1160, res=300)
par(mar=c(4.1,4.1,0.6,0.6))
boxplot(t(test_merge), col=c("red", "darkgreen", "blue"), xaxt="n", at=1:27+rep(1:9,each=3))
pheno <- as.matrix(read.table("C:/Users/pook/Desktop/Genetic_Datasets/MAZE_BLUEs_acrossLocations_DHperse2017_v1.csv", sep=";"))[1,-1]
pheno[5] <- "PH_V4"
pheno[6] <- "PH_V6"
axis(1, at=seq(2,36, by=4), label=as.character(pheno))
legend("topleft", c("full SNP-dataset", "pruned SNP-Dataset", "Block-dataset"), fill=c("red", "brown", "blue"))
dev.off()
print(nr)
load("C:/Users/pook/Desktop/seqtest.RData")
length(seq)
?polygon
polygon(c(index,index+1,index+1,index), c(0,0,1,1)
}
plot(ylim=c(0,1), xlim=c(0,115380))
plot(x=Inf, y=Inf, ylim=c(0,1), xlim=c(0,115380))
polygon(c(index,index+1,index+1,index), c(0,0,1,1)
}
polygon(c(index,index+1,index+1,index), c(0,0,1,1))
plot(x=Inf, y=Inf, ylim=c(0,1), xlim=c(0,11
)
)
polygon(c(index,index+1,index+1,index), c(0,0,1,1))
index
index <- 5
polygon(c(index,index+1,index+1,index), c(0,0,1,1))
?polygon
polygon(c(index,index+1,index+1,index), c(0,0,1,1), col="green")
polygon(c(index,index+1,index+1,index), c(0,0,1,1), col="green", lty=0)
plot(x=Inf, y=Inf, ylim=c(0,1), xlim=c(0,11
))
polygon(c(index,index+1,index+1,index), c(0,0,1,1), col="green", lty=0)
for(index in 1:115380){
polygon(c(index,index+1,index+1,index), c(0,0,1,1), col=if(seq[index]=="-1"){"red"} else if(seq[index]=="0+"){"blue"})
}
plot(x=Inf, y=Inf, ylim=c(0,1), xlim=c(0,115380))
for(index in 1:115380){
polygon(c(index,index+1,index+1,index), c(0,0,1,1), col=if(seq[index]=="-1"){"red"} else if(seq[index]=="0+"){"blue"})
}
plot(x=Inf, y=Inf, ylim=c(0,1), xlim=c(0,115380))
for(index in 1:115380){
print(index)
polygon(c(index,index+1,index+1,index), c(0,0,1,1), col=if(seq[index]=="-1"){"red"} else if(seq[index]=="0+"){"blue"})
}
plot(x=Inf, y=Inf, ylim=c(0,1), xlim=c(0,115380))
for(index in (1:115380)[c(which(seq=="-1"), which(seq=="0"))){
plot(x=Inf, y=Inf, ylim=c(0,1), xlim=c(0,115380))
for(index in (1:115380)[c(which(seq=="-1"), which(seq=="0"))]){
print(index)
polygon(c(index,index+1,index+1,index), c(0,0,1,1), col=if(seq[index]=="-1"){"red"} else if(seq[index]=="0+"){"blue"}, lty=0)
}
plot(x=Inf, y=Inf, ylim=c(0,1), xlim=c(0,115380))
for(index in (1:115380)[c(which(seq=="-1"), which(seq=="0+"))]){
print(index)
polygon(c(index,index+1,index+1,index), c(0,0,1,1), col=if(seq[index]=="-1"){"red"} else if(seq[index]=="0+"){"blue"}, lty=0)
}
legend("topright", c("CNV", "NA"), lty=c(1,1), col=c("blue", "red"))
which(seq=="0+")
diff(which(seq=="0+"))
diff(which(seq=="-1"))
plot(x=Inf, y=Inf, ylim=c(0,1), xlim=c(0,115380))
for(index in (1:115380)[c(which(seq=="-1"), which(seq=="0+"))]){
print(index)
#  polygon(c(index,index+1,index+1,index), c(0,0,1,1), col=if(seq[index]=="-1"){"red"} else if(seq[index]=="0+"){"blue"}, lty=0)
polygon(c(index-1,index+2,index+2,index-1), c(0,0,1,1), col=if(seq[index]=="-1"){"red"} else if(seq[index]=="0+"){"blue"}, lty=0)
}
plot(x=Inf, y=Inf, ylim=c(0,1), xlim=c(0,115380), naxt="y")
plot(x=Inf, y=Inf, ylim=c(0,1), xlim=c(0,115380), yaxt="n")
plot(x=Inf, y=Inf, ylim=c(0,1), xlim=c(0,115380), yaxt="n", ylab="")
for(index in (1:115380)[c(which(seq=="-1"), which(seq=="0+"))]){
print(index)
#  polygon(c(index,index+1,index+1,index), c(0,0,1,1), col=if(seq[index]=="-1"){"red"} else if(seq[index]=="0+"){"blue"}, lty=0)
polygon(c(index-1,index+2,index+2,index-1), c(0,0,1,1), col=if(seq[index]=="-1"){"red"} else if(seq[index]=="0+"){"blue"}, lty=0)
}
legend("topright", c("CNV", "NA"), lty=c(1,1), col=c("blue", "red"))
plot(x=Inf, y=Inf, ylim=c(0,1), xlim=c(0,115380), yaxt="n", ylab="", xlab="chromosome 10")
for(index in (1:115380)[c(which(seq=="-1"), which(seq=="0+"))]){
print(index)
#  polygon(c(index,index+1,index+1,index), c(0,0,1,1), col=if(seq[index]=="-1"){"red"} else if(seq[index]=="0+"){"blue"}, lty=0)
polygon(c(index-1,index+2,index+2,index-1), c(0,0,1,1), col=if(seq[index]=="-1"){"red"} else if(seq[index]=="0+"){"blue"}, lty=0)
}
legend("topright", c("CNV", "NA"), lty=c(1,1), col=c("blue", "red"))
R CMD check
