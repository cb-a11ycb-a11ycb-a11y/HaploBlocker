if(length(target_coverage)>0){
min_majorblock <- min_majorblock_count[current_iteration]
blocklist <- blocklist_start
}
nodes <- length(blocklist)
iteration <- 1
cat("Start_Blockmerging\n")
helper <- blocklist_startend(blocklist, type="snp")
helper_old <- NULL
while(length(helper_old)==0 || (nrow(helper_old)!=nrow(helper)) || prod(helper_old==helper)==0){
cat(paste("Iteration", iteration, ":", nodes, "blocks\n"))
helper_old <- helper
blocklist <- block_merging(blocklist, blockinfo, dataset, dhm, indi, nwindow, window_sequence_list, off_lines, min_similarity=min_similarity,
consider_all=consider_all, node_min=node_min, save_allblock=save_allblock, helper=helper,
c_dhm=c_dhm, c_dhm_mode=c_dhm_mode, intersect_func=intersect_func,
min_per_subgroup=min_per_subgroup, subgroup_exception=subgroup_exception,
run=(iteration-1))
if(merge_closeblock==TRUE){
blocklist <- block_closeblock_merging(blocklist, blockinfo, indi, nwindow, max_diff_l, max_diff_i, intersect_func=intersect_func,
dataset=dataset)
}
if(min_majorblock>(0)){
if(min_majorblock_steps>1){
blocklist <- blockinfo_biggest(blocklist, nwindow, indi, min_majorblock=min(iteration-1, min_majorblock_steps-1)/(min_majorblock_steps-1)*min_majorblock,
weighting_length=weighting_length, weighting_size=weighting_size,
recalculate_biggest=recalculate_biggest, window_size=window_size)
} else{
blocklist <- blockinfo_biggest(blocklist, nwindow, indi, min_majorblock=min_majorblock, weighting_length=weighting_length, weighting_size=weighting_size,
recalculate_biggest=recalculate_biggest, window_size=window_size)
}
}
helper <- blocklist_startend(blocklist, type="snp")
nodes <- length(blocklist)
iteration <- iteration + 1
}
blocklist <- list()
for(index in 1:ncluster){
if(length(partial_blocklist[[index]])>0){
for(index2 in 1:length(partial_blocklist[[index]])){
blocklist[[length(blocklist)+1]] <- partial_blocklist[[index]][[index2]]
blocklist[[length(blocklist)]][[12]] <- index
}
}
}
if(length(target_coverage)>0){
min_majorblock <- min_majorblock_count[current_iteration]
blocklist <- blocklist_start
}
nodes <- length(blocklist)
iteration <- 1
cat("Start_Blockmerging\n")
helper <- blocklist_startend(blocklist, type="snp")
helper_old <- NULL
cat(paste("Iteration", iteration, ":", nodes, "blocks\n"))
helper_old <- helper
blocklist <- block_merging(blocklist, blockinfo, dataset, dhm, indi, nwindow, window_sequence_list, off_lines, min_similarity=min_similarity,
consider_all=consider_all, node_min=node_min, save_allblock=save_allblock, helper=helper,
c_dhm=c_dhm, c_dhm_mode=c_dhm_mode, intersect_func=intersect_func,
min_per_subgroup=min_per_subgroup, subgroup_exception=subgroup_exception,
run=(iteration-1))
length(blocklist)
if(merge_closeblock==TRUE){
blocklist <- block_closeblock_merging(blocklist, blockinfo, indi, nwindow, max_diff_l, max_diff_i, intersect_func=intersect_func,
dataset=dataset)
}
if(min_majorblock>(0)){
if(min_majorblock_steps>1){
blocklist <- blockinfo_biggest(blocklist, nwindow, indi, min_majorblock=min(iteration-1, min_majorblock_steps-1)/(min_majorblock_steps-1)*min_majorblock,
weighting_length=weighting_length, weighting_size=weighting_size,
recalculate_biggest=recalculate_biggest, window_size=window_size)
} else{
blocklist <- blockinfo_biggest(blocklist, nwindow, indi, min_majorblock=min_majorblock, weighting_length=weighting_length, weighting_size=weighting_size,
recalculate_biggest=recalculate_biggest, window_size=window_size)
}
}
helper <- blocklist_startend(blocklist, type="snp")
nodes <- length(blocklist)
iteration <- iteration + 1
length(blocklist)
if(length(target_coverage)>0){
min_majorblock <- min_majorblock_count[current_iteration]
blocklist <- blocklist_start
}
nodes <- length(blocklist)
cat(paste("Iteration", iteration, ":", nodes, "blocks\n"))
helper_old <- helper
bl2 <- blocklist
blocklist <- block_merging(blocklist, blockinfo, dataset, dhm, indi, nwindow, window_sequence_list, off_lines, min_similarity=min_similarity,
consider_all=consider_all, node_min=node_min, save_allblock=save_allblock, helper=helper,
c_dhm=c_dhm, c_dhm_mode=c_dhm_mode, intersect_func=intersect_func,
min_per_subgroup=min_per_subgroup, subgroup_exception=subgroup_exception,
run=(iteration-1))
length(blocklist)
if(merge_closeblock==TRUE){
blocklist <- block_closeblock_merging(blocklist, blockinfo, indi, nwindow, max_diff_l, max_diff_i, intersect_func=intersect_func,
dataset=dataset)
}
length(blocklist)
if(min_majorblock>(0)){
if(min_majorblock_steps>1){
blocklist <- blockinfo_biggest(blocklist, nwindow, indi, min_majorblock=min(iteration-1, min_majorblock_steps-1)/(min_majorblock_steps-1)*min_majorblock,
weighting_length=weighting_length, weighting_size=weighting_size,
recalculate_biggest=recalculate_biggest, window_size=window_size)
} else{
blocklist <- blockinfo_biggest(blocklist, nwindow, indi, min_majorblock=min_majorblock, weighting_length=weighting_length, weighting_size=weighting_size,
recalculate_biggest=recalculate_biggest, window_size=window_size)
}
}
length(blocklist)
nwindow
indi
min(iteration-1, min_majorblock_steps-1)/(min_majorblock_steps-1)*min_majorblock
weighting_length
weighting_size
recalculate_biggest
window_size
blocklist <- bl2
blocklist <- block_merging(blocklist, blockinfo, dataset, dhm, indi, nwindow, window_sequence_list, off_lines, min_similarity=min_similarity,
consider_all=consider_all, node_min=node_min, save_allblock=save_allblock, helper=helper,
c_dhm=c_dhm, c_dhm_mode=c_dhm_mode, intersect_func=intersect_func,
min_per_subgroup=min_per_subgroup, subgroup_exception=subgroup_exception,
run=(iteration-1))
if(merge_closeblock==TRUE){
blocklist <- block_closeblock_merging(blocklist, blockinfo, indi, nwindow, max_diff_l, max_diff_i, intersect_func=intersect_func,
dataset=dataset)
}
min_majorblock_steps
bl2 <- blocklist
blocklist <- blockinfo_biggest(blocklist, nwindow, indi, min_majorblock=min(iteration-1, min_majorblock_steps-1)/(min_majorblock_steps-1)*min_majorblock,
weighting_length=weighting_length, weighting_size=weighting_size,
recalculate_biggest=recalculate_biggest, window_size=window_size)
length(blocklist)
blocklist <- bl2
min_majorblock=min(iteration-1, min_majorblock_steps-1)/(min_majorblock_steps-1)*min_majorblock;
weighting_length=weighting_length; weighting_size=weighting_size;
recalculate_biggest=recalculate_biggest; window_size=window_size
weighting_size
weighting_length
blockinfo_biggest <- function(blocklist, nwindow=NULL, indi=NULL, type="window", min_majorblock=5000, weighting_length=1, weighting_size=1,
min_majorblock
type
type
type="window"
recalculate_biggest
window_size
if(length(unique(window_size))!=1){
type <- "snp"
} else{
min_majorblock <- min_majorblock / window_size[1]
}
min_majorblock
window_size
min_majorblock
if(length(indi)==0){
indi <- indi_calc(blocklist)
}
if(length(nwindow)==0){
helper <- max(blocklist_startend(blocklist, type="snp"))
nwindow <- ceiling(helper/window_size)
}
nwindow
se <- blocklist_startend(blocklist, type=type)
sel <- se[,2]-se[,1]+1
size <- blocklist_size(blocklist)
major_rating <- sel ^ weighting_length * size ^ weighting_size
order <- sort(major_rating, index.return=TRUE)$ix
major_rating
order
needed_size <- max(se[,2])
needed_size
bdataset <- matrix(0, nrow=indi, ncol=needed_size)
type
for(index in order){
if(type=="window"){
bdataset[blocklist[[index]][[6]], blocklist[[index]][[2]]$window:blocklist[[index]][[3]]$window] <- index
} else{
bdataset[blocklist[[index]][[6]], blocklist[[index]][[2]]$snp:blocklist[[index]][[3]]$snp] <- index
}
}
count <- numeric(length(blocklist))
for(index in 1:length(count)){
if(recalculate_biggest || length(blocklist[[index]])<11 || length(blocklist[[index]][[11]])==0 || blocklist[[index]][[11]] < min_majorblock){
if(type=="window"){
count[index] <- sum(bdataset[blocklist[[index]][[6]],blocklist[[index]][[2]]$window:blocklist[[index]][[3]]$window]==index)
} else{
count[index] <- sum(bdataset[blocklist[[index]][[6]],blocklist[[index]][[2]]$snp:blocklist[[index]][[3]]$snp]==index)
}
blocklist[[index]][[11]] <- count[index]
} else{
count[index] <- blocklist[[index]][[11]]
}
}
count
max(count)
count
remove_count <- sort(which(count<min_majorblock), decreasing=TRUE)
remove_count
length(remove_count)
length(count)
window_sequence=NULL; window_size=20; merging_error=1; node_min=5; gap=10;
min_share=0.975; off_lines=2; min_similarity=0.99; merge_closeblock=FALSE;
max_diff_l=1; max_diff_i=1; min_majorblock=5000; bp_map=NULL; window_anchor_gens=NULL;
consider_nodes=TRUE; consider_edge=TRUE; edge_min=5; subgroups=NULL; min_per_subgroup=0; subgroup_exception=0;
consider_all=TRUE; save_allblock=TRUE; block_extending=TRUE;
max_extending_diff=1; extending_ratio=20; min_majorblock_steps=4;
snp_extending=TRUE; max_extending_diff_snp=0; extending_ratio_snp=Inf;  major_snp_calculation=TRUE;
off_node_addition=FALSE; off_node_minimum_blocklength=10; off_node_minimum_blocksize=5;
raster=5; at_least_one=TRUE;
prefilter=FALSE; maf=0.00; equal_remove=FALSE;
big_output=FALSE; blockinfo_mode=0; c_dhm_mode=TRUE;
intersect_func=TRUE; fast_compiler=TRUE;
max_groups=0; recoding=FALSE; recoding_notneeded=FALSE;
consider_multi=FALSE; multi_min=5; blockinfo_mode_na=FALSE;
actual_snp_weight = 5; na_snp_weight=2; na_seq_weight=0;
weighting_length=1; weighting_size=1;
recalculate_biggest=TRUE;
target_coverage=NULL;
max_iteration=10;
min_step_size=25;
target_stop=0.001;
multi_window_mode=FALSE;
adaptive_mode=FALSE;
developer_mode=FALSE;
double_share=1;
early_remove=FALSE;
node_min_early=NULL;
min_reduction_cross=-Inf;
min_reduction_neglet=-Inf;
parallel_window=Inf;
window_overlap=0;
window_cores=1
if(adaptive_mode==TRUE){
multi_window_mode <- TRUE
if((length(window_size)==1 && window_size==20)){
window_size <- c(5,10,20,50)
}
if(length(target_coverage)==0){
target_coverage <- 0.9
}
}
if(multi_window_mode==FALSE && (length(window_size)>1 || length(merging_error)>1 || length(min_share)>1)){
cat("Active multi_window_mode")
multi_window_mode <- TRUE
}
if(multi_window_mode){
ncluster <- max(length(window_size), length(min_share), merging_error)
window_size <- rep(window_size,length.out=ncluster)
min_share <- rep(min_share, length.out=ncluster)
merging_error <- rep(merging_error, length.out=ncluster)
} else{
ncluster <- 1
}
if(merge_closeblock==TRUE && length(unique(window_size))){
merge_closeblock <- FALSE
cat("Closeblock-Merging only for single window size\n")
}
window_sequence_list <- list()
if(length(window_sequence)!=ncluster){
for(index in 1:ncluster){
window_sequence_list[[index]] <- window_sequence
}
} else{
window_sequence_list <- window_sequence
}
window_sequence_list[[ncluster+1]] <- "placeholder"
if(fast_compiler){
requireNamespace("compiler")
enableJIT(3)
}
if(intersect_func){
intersect_func <- HaploBlocker::intersect
} else{
intersect_func <- base::intersect
}
if(is.data.frame(dhm)){
dhm <- as.matrix(dhm)
}
if(sum(is.na(dhm))>0){
dhm[is.na(dhm)] <- 9
}
if(prefilter==TRUE){
dhm <- dataset_filter(dhm, maf, equal_remove)
}
if(recoding==TRUE){
if(recoding_notneeded==TRUE){
recoding <- TRUE
} else{
for(index in 1:nrow(dhm)){
check1 <- dhm[index,]==dhm[index,1]
dhm[index, check1] <- "A"
dhm[index, -(check1)*1:indi] <- "C"
}
}
}
# Martins Erweiterung
unique.dhm <- unique(as.vector(dhm))
fixcoding(unique.dhm)
c_dhm <- codeSNPs(dhm)
blockinfo <- list()
data <- list()
dataset <- list()
partial_blocklist <- list()
nwindow <- rep(0, ncluster)
for(index in 1:ncluster){
if(blockinfo_mode_na){
blockinfo_out <- blockinfo_calculation_na(dhm, window_sequence= window_sequence_list[[index]], window_anchor_gens = window_anchor_gens, blockinfo_mode=blockinfo_mode,
window_size = window_size[index], merging_error = merging_error[index], bp_map = bp_map, at_least_one=at_least_one,
actual_snp_weight=actual_snp_weight, na_snp_weight=na_snp_weight, na_seq_weight= na_seq_weight)
} else{
blockinfo_out <- blockinfo_calculation(dhm, window_sequence= window_sequence_list[[index]], window_anchor_gens = window_anchor_gens, blockinfo_mode=blockinfo_mode,
window_size = window_size[index], merging_error = merging_error[index], bp_map = bp_map, at_least_one=at_least_one,
c_dhm=c_dhm, max_groups=max_groups)
}
blockinfo[[index]] <- blockinfo_out[[1]]
window_sequence_list[[index]] <- blockinfo_out[[2]]
if(max_groups>0){
cat(paste("Generated:", nrow(window_sequence_list[[index]]), "windows\n"))
cat(paste("With size: Max", max(window_sequence_list[[index]][,3]), "Min", min(window_sequence_list[[index]][,3]), "Avg", round(mean(window_sequence_list[[index]][,3])*100)/100),"\n")
}
data[[index]] <- nodes_calculation(blockinfo[[index]], window_sequence_list[[index]])
data[[index]] <- simple_merge(data[[index]], intersect_func=intersect_func)
data[[index]] <- calculate_transition(data[[index]], intersect_func=intersect_func)
nwindow[index] <- nrow(window_sequence_list[[index]])
indi <- sum(blockinfo[[index]][[1]][[1]])
nodes <- length(data[[index]])
if(early_remove){
cat("Start_Early_remove\n")
cat(paste("Starting-Nodes:", nodes,"\n"))
if(length(node_min_early)==0){
node_min_early <- node_min
}
data[[index]] <- ignore_small_nodes(data[[index]], indi, nwindow[index], node_min_early, gap, intersect_func=intersect_func)
data[[index]] <- simple_merge_prob(data[[index]], indi, nwindow[index])
}
nodes <- length(data[[index]])
iteration <- 1
cat("Start_CrossMerging_full\n")
a <- start_end_block(data[[index]])
a_old <- NULL
while((length(a_old)==0 || (nrow(a_old)!=nrow(a)) || prod(a_old==a)==0) && ( length(a_old)==0 || (nrow(a_old)-nrow(a))>min_reduction_cross)){
a_old <- a
cat(paste("Iteration", iteration, ":", nodes, "nodes\n"))
data[[index]] <- crossmerge(data[[index]], indi, nwindow[index], a, intersect_func=intersect_func)
data[[index]] <- simple_merge_prob(data[[index]], indi, nwindow[index])
a <- start_end_block(data[[index]])
nodes <- length(data[[index]])
iteration <- iteration + 1
}
nodes <- length(data[[index]])
iteration <- 1
cat("Start_IgnoreSmall\n")
while((iteration==1 || (nrow(a_old)!=nrow(a)) || prod(a_old==a)==0) && ( iteration==1 || (nrow(a_old)- nrow(a))>min_reduction_neglet)){
a_old <- a
cat(paste("Iteration", iteration, ":", nodes, "nodes\n"))
data[[index]] <- ignore_small_nodes(data[[index]], indi, nwindow[index], node_min, gap, intersect_func=intersect_func)
data[[index]] <- simple_merge_prob(data[[index]], indi, nwindow[index], intersect_func=intersect_func)
data[[index]] <- crossmerge(data[[index]], indi, nwindow[index], intersect_func=intersect_func)
data[[index]] <- simple_merge_prob(data[[index]], indi, nwindow[index], intersect_func=intersect_func)
a<- start_end_block(data[[index]])
nodes <- length(data[[index]])
iteration <- iteration + 1
}
dataset[[index]] <- block_dataset_construction(blockinfo[[index]], indi=indi, nwindow=nwindow[index])
partial_blocklist[[index]] <- identify_blocks(data[[index]], indi, nwindow[index], min_share[index], edge_min=edge_min, subgroups=subgroups,
consider_nodes=consider_nodes, consider_edge=consider_edge, min_per_subgroup=min_per_subgroup,
subgroup_exception=subgroup_exception,
intersect_func=intersect_func, consider_multi=consider_multi, multi_min=multi_min,
double_share=double_share, node_min=node_min)
}
length(data)
data
length(data[[1]])
nodes <- length(data[[index]])
iteration <- 1
cat("Start_IgnoreSmall\n")
a_old <- a
cat(paste("Iteration", iteration, ":", nodes, "nodes\n"))
data[[index]] <- ignore_small_nodes(data[[index]], indi, nwindow[index], node_min, gap, intersect_func=intersect_func)
data[[1]][[1]]
data[[1]][[1]]$n_haplo
for(index in 1:10000) print(data[[1]][[index]]$n_haplo)
node_min=5
gap=10
resttiere <- matrix(0, nrow=indi, ncol=nwindow)
for(index in 1:length(data)){
if(data[[index]][[3]]< node_min){
resttiere[data[[index]][[5]], data[[index]][[1]]$window:data[[index]][[2]]$window] <- 1
data[[index]][[3]] <- 0
data[[index]][[5]] <- numeric(0)
if(data[[index]][[2]]$window<nwindow){
next1 <- unique(c(0,data[[index]][[6]][,1]))[-1]
for(index2 in next1){
data[[index2]] <- calculate_new_transition(data, index2, nwindow, intersect_func=intersect_func)
}
}
if(data[[index]][[1]]$window>1){
previous1 <- unique(c(0,data[[index]][[7]][,1]))[-1]
for(index2 in previous1){
data[[index2]] <- calculate_new_transition(data, index2, nwindow, intersect_func=intersect_func)
}
}
}
}
data <- data[[1]]
resttiere <- matrix(0, nrow=indi, ncol=nwindow)
for(index in 1:length(data)){
if(data[[index]][[3]]< node_min){
resttiere[data[[index]][[5]], data[[index]][[1]]$window:data[[index]][[2]]$window] <- 1
data[[index]][[3]] <- 0
data[[index]][[5]] <- numeric(0)
if(data[[index]][[2]]$window<nwindow){
next1 <- unique(c(0,data[[index]][[6]][,1]))[-1]
for(index2 in next1){
data[[index2]] <- calculate_new_transition(data, index2, nwindow, intersect_func=intersect_func)
}
}
if(data[[index]][[1]]$window>1){
previous1 <- unique(c(0,data[[index]][[7]][,1]))[-1]
for(index2 in previous1){
data[[index2]] <- calculate_new_transition(data, index2, nwindow, intersect_func=intersect_func)
}
}
}
}
# Additional 0er
checker <- matrix(0, nrow=indi, ncol=nwindow)
for(index in 1:indi){
ones <- which(resttiere[index,]==1)
if(sum(ones)>0){
diff <- ones[-1] -ones[-length(ones)]
reaction <- unique(c(0,((diff < gap) & (diff>1)) *(1:length(diff))))[-1]
for(change in reaction){
checker[index, (ones[change]+1):(ones[change+1]-1)] <- 1
}
if(ones[1]< gap && ones[1]>1){
checker[index, 1:ones[1]] <- 1
}
if(ones[length(ones)]> (nwindow-gap+1) && ones[length(ones)]<nwindow){
checker[index, (ones[length(ones)]+1):nwindow] <- 1
}
}
}
block1 <- matrix(0, nrow=indi, ncol=nwindow)
for(index in 1:length(data)){
block1[data[[index]][[5]], data[[index]][[1]]$window: data[[index]][[2]]$window] <- index
}
abc <- unique(c(0,block1 * checker))[-1]
abc
for(index in abc){
removes <- which(checker[,data[[index]][[1]]$window]==1)
data[[index]][[5]] <- intersect_func(data[[index]][[5]], (1:indi)[-removes])
data[[index]][[3]] <- length(data[[index]][[5]])
data[[index]] <- calculate_new_transition(data, index, nwindow, intersect_func=intersect_func)
}
length(data)
data <-renaming_combi(data, nwindow)
data
b <- nodes_size(data)
a <- start_end_block(data)
relevant <- which(b>0)
pos <-sort(a[relevant,1], index.return=TRUE)$ix
old.name <- relevant[pos]
new.data <- list()
new.length <- sum(b>0)
for(index in 1:new.length){
new.data[[index]] <- data[[old.name[index]]]
#switchname
if(new.data[[index]][[2]]$window < nwindow){
old_a <- new.data[[index]][[6]][,1]
row <- 1
for(switch in old_a[old_a!=0]){
new.data[[index]][[6]][row,1] <- which(old.name==switch)
row <- row+1
}
}
if(new.data[[index]][[1]]$window>1){
old_e <- new.data[[index]][[7]][,1]
row <- 1
for(switch in old_e[old_e!=0]){
new.data[[index]][[7]][row,1] <- which(old.name==switch)
row <- row+1
}
}
}
old.name[index]
index
old.name
relevant
pos
start_end_block
a
b <- nodes_size(data)
a <- start_end_block(data)
relevant <- which(b>0)
relevant
b
library(HaploBlocker)
load("C:/Users/pook/Desktop/Imputed_Chr10.RData")
dim(geno_imputed)
geno_imputed[1:10,1:10]
dim(geno_imputed)
peddata <- matrix("A",nrow=indi, ncol= nsnp*2)
nsnp <- nrow(geno_imputed)
indi <- ncol(geno_imputed)
peddata <- matrix("A",nrow=indi, ncol= nsnp*2)
dim(geno_imputed)
snp
snp <-
1
replace2 <- which(geno_imputed[snp,]==2)
replace2
geno_imputed[1,]
