{
    "collab_server" : "",
    "contents" : "var.FE <- function(b.hat, X, s.e.hat, center=FALSE){\n  ##############################################################################\n  # Task: Calculate genomic variance in Fixed Effects Model (FEM)\n  # Input: Estimated effects, design matrix without intercept,\n  #        estimated residual sd, center=TRUE if the estimation has been\n  #        executed with a centered design matrix\n  # Output: Estimated genomic variances of the Fixed Effects Model (biased,\n  #         unbiased version and bias correction)\n  # Remark:\n  ##############################################################################\n  n <- nrow(X)\n  p <- ncol(X)\n  ##############################################################################\n  Xbeta <- tcrossprod(X, t(b.hat))\n  Vf.bias <- sum(Xbeta ^ 2) / (n - 1)\n  bias.corr <- p\n  if (!center){\n    Vf.bias <- Vf.bias - (sum(Xbeta) ^ 2) / (n ^ 2 - n)\n    sumX <- t(colSums(X))\n    xtxinv <- solve(crossprod(X))\n    bias.corr <- bias.corr - tracerXtXS(sumX, xtxinv) / n\n  }\n  bias.corr <- bias.corr * (s.e.hat ^ 2) / (n - 1)\n  Vf <- Vf.bias - bias.corr\n  ##############################################################################\n  output <- list(V_f_bias <- Vf.bias, V_f <- Vf,\n                 bias.correction <- bias.corr)\n  return(output)\n}\n\n\n\nvar.Bayes <- function(X, B, center=FALSE){\n  ##############################################################################\n  # Task: Calculate genomic variance in Bayesian Random Models\n  # Input: Design matrix X, matrix B with MCMC samples for beta (rows are\n  #        iterations, columns beta)\n  # Output: List with biased estimator and the three stepwise bias corrections\n  # Remark: User has to make sure that the MCMC samples are from the posterior\n  #         distribution; variance depends on the chosen model and therefore it\n  #         is questionable whether this procedure is meaningful; we never\n  #         estimate the genomic variance from quantitative genetics\n  ##############################################################################\n  # Preparations / Support Variables\n  n <- nrow(X)\n  I <- nrow(B)\n  # Posterior distribution of variance\n  tcp1 <- tcrossprod(X, B)\n  V.post <- sum(tcp1 ^ 2) / (I * (n - 1))\n  if(!center){\n    colsumXB <- colSums(tcp1)\n    V.post <- V.post - sum(colsumXB ^ 2) / (I * (n - 1) * n)\n  }\n  ##############################################################################\n  output <- list(V_post <- V.post)\n  return(output)\n}\n\n\n\n\n\n\n\n\n\nvar.RE <- function(u.hat, X, var.b.hat, cov.u, var.e.hat=NULL, center=FALSE){\n################################################################################\n  # Task: Calculate genomic variance in Random Effects Model (REM)\n  # Input: estimated random effects and their covariance, design matrix (mean\n  #        centered)\n  # Output: estimated genomic variance of the REM. Still missing: dependency of\n  #         the estimators\n  # Remark: estimate depends on the model fit (and on the chosen model obv.)\n################################################################################\n  n <- nrow(X)\n  p <- ncol(X)\n################################################################################\n  # FEM estimator (tb * S_X * b)\n  Xu <- tcrossprod(X, t(u.hat))\n  Vr.1 <- sum(Xu ^ 2) / (n - 1)\n  # Theoretical variance REM (sb2 * spur(S_X))\n  Vr.old <- sum(X ^ 2) * var.b.hat / (n - 1)\n  # Bias correction using sommer covariance matrix\n  Vr.2 <- tracerXtXS(X, cov.u) / (n - 1)\n  #############################################################################\n  # new fancy trial\n  edb <- var.e.hat /  var.b.hat\n  xxt <- tcrossprod(X)\n  S <- solve(xxt + diag(edb, n) )\n  bias <- var.b.hat * tracerXtXS(xxt, S) / (n - 1)\n  #vx.cor <- Vr.old / n\n  #vx.cor2 <- bias / n\n  if (!center){\n    colsumX <- as.vector(colSums(X))\n    Vr.1 <- Vr.1 - (sum(Xu) ^ 2) / (n ^ 2 - n)\n    Vr.2 <- Vr.2 - tracerXtXS(t(colsumX), cov.u) / (n ^ 2 - n)\n    theo.corr <- sum(colsumX ^ 2) / (n ^ 2 - n) * var.b.hat\n    Vr.old <- Vr.old - theo.corr\n    bias <- bias - var.b.hat * tracerXtXS(t(colSums(xxt)), S) / (n ^ 2 - n)\n    #vx <- (colsum(X) ^ 2) / (n ^ 2) * var.b.hat\n    #vx.cor <- vx - vx.cor\n    #xEx <- tcrossprod(X, colsumX) / n\n    #biasx <- var.b.hat * sum(crossprod(S, xEx) * xEx)\n    #vx.cor2 <- biasx - vx.cor2\n  }\n  Vr.f1 <- Vr.1\n  Vr.f2 <- Vr.2\n  Vr <- Vr.old + Vr.f1 - Vr.f2\n  Vbias <- bias\n################################################################################\n  # Output\n  output <- list(V_r_old=Vr.old, V_r_f1=Vr.f1, V_r_f2=Vr.f2, V_r=Vr,\n                 V_bias=Vbias)\n  return(output)\n}\n################################################################################\n################################################################################\n\n\nvar.Equi <- function(g.hat, G, var.b.hat, var.e.hat){\n\n  if(var.b.hat==0){\n    return(list(0,0,0,0))\n  }\n  ################################################################################\n  # Task: Calculate genomic variance in Random Effects Model (REM)\n  # Input: estimated random effects and their covariance, design matrix (mean\n  #        centered)\n  # Output: estimated genomic variance of the REM. Still missing: dependency of\n  #         the estimators\n  # Remark: estimate depends on the model fit (and on the chosen model obv.)\n  ################################################################################\n  n <- nrow(G)\n################################################################################\n  # FEM estimator (tg * g)\n  Vr.f1 <- sum(g.hat ^ 2) / (n - 1)\n  # Theoretical variance REM (sb2 * spur(S_X))\n  Vr.old <- sum(diag(G)) * var.b.hat / (n - 1)\n  # Bias correction using sommer covariance matrix\n  #Vr.f2 <- sum(diag(cov.g)) / (n - 1)\n  # new fancy trial\n  edb <- var.e.hat /  var.b.hat\n  S <- solve(G + diag(edb, n) )\n  Vbias <- var.b.hat * tracerXtXS(G, S) / (n - 1)\n  Vr <- Vr.old + Vr.f1 - Vbias\n################################################################################\n  # Output\n  output <- list(V_r_old=Vr.old, V_r_f1=Vr.f1, V_bias=Vbias, V_r=Vr)\n  return(output)\n}\n\n\n\n\n\n\n\n\n################################################################################\ntracerXtXS <- function(X, Sb){\n  tcp <- crossprod(t(X), Sb)\n  result <- sum(tcp * X)\n  return(result)\n}\n################################################################################\n\n",
    "created" : 1528357231499.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2946367156",
    "id" : "550B1D3D",
    "lastKnownWriteTime" : 1529332955,
    "last_content_update" : 1529332955243,
    "path" : "C:/Users/tpook/Desktop/GenVar_2703.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}