{
    "collab_server" : "",
    "contents" : "/*\n Authors\n Martin Schlather, schlather@math.uni-mannheim.de\n\n library for simulation of random fields\n\n Copyright (C) 2001 -- 2016 Martin Schlather,\n\nThis program is free software; you can redistribute it and/or\nmodify it under the terms of the GNU General Public License\nas published by the Free Software Foundation; either version 3\nof the License, or (at your option) any later version.\nRO\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n*/\n\n//#include <stdio.h>\n//#include <stdlib.h>\n//#include <unistd.h>\n//#include <string.h>\n\n\n#include <R.h>\n#include <Rinternals.h>\n#include <Rdefines.h>\n#include <R_ext/Linpack.h>\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n\n// ACHTUNG: Reihenfolge nicht aendern!\n#include \"chaploblocker.h\"\n#include \"options.h\"\n#include \"def.h\"\n#include \"xport_import.h\"\n#include <Basic_utils.h>\n#include \"error.h\"\n#include <zzz_RandomFieldsUtils.h>\n\n\n\nCALL1(void, getErrorString, errorstring_type, errorstring)\nCALL1(void, setErrorLoc, errorloc_type, errorloc)\n\n\n\nconst char * prefixlist[prefixN] =\n  {\"blocker\"};\n\n\n// IMPORTANT: all names of general must be at least 3 letters long !!!\nconst char *blocker[blockerN] =\n  {\"unused!\", \"unused!\"};\n\n\n\nint PL=C_PRINTLEVEL;\nglobalparam GLOBAL = {\nblocker_START\n};\nutilsparam *GLOBAL_UTILS;\n\n\nconst char **all[prefixN] = {blocker};\nint allN[prefixN] = {blockerN};\n\n\nvoid setparameter(int i, int j, SEXP el, char name[200],\n\t\t  bool VARIABLE_IS_NOT_USED isList)\n{\n switch(i) {\n  case 0: {// blocker\n    blocker_param *gp;\n    gp = &(GLOBAL.blocker);\n    switch(j) {\n    case 0: gp->ANY_diff_value = POS0NUM; break;\n    case 1: gp->ANY_allequal_value = POS0NUM; break;\n     default: BUG;\n    }}\n    break;\n  default: BUG;\n  }\n}\n\nvoid finalparameter() {\n  PL = GLOBAL_UTILS->basic.Cprintlevel;\n}\n\nvoid getparameter(SEXP *sublist) {\n  int i, k;\n  i = 0; {\n    k = 0;\n    blocker_param *p = &(GLOBAL.blocker);\n    ADD(ScalarReal(p->ANY_diff_value));\n    ADD(ScalarReal(p->ANY_allequal_value));\n  }\n    assert (i == prefixN - 1);\n}\n\n\nvoid attachRFoptionsHaploBlocker() {\n  includeXport();\n  Ext_getUtilsParam(&GLOBAL_UTILS);\n  //  GLOBAL_UTILS->solve.max_chol = 8192;\n  //  GLOBAL_UTILS->solve.max_svd = 6555;\n/*\n  spam.min.n = as.integer(400) # 400\n  spam.tol = 1e-8\n  spam.min.p = 0.8 # 0.8\n  spam.n = as.integer(1:500)\n  spam.factor = as.integer(4294967)# prime, so that n * factor is still integer\n  silent = TRUE\n*/\n\n  finalparameter();\n  Ext_attachRFoptions(prefixlist, prefixN, all, allN,\n\t\t     setparameter, finalparameter, getparameter, -10);\n  finalparameter();\n}\n\nvoid detachRFoptionsHaploBlocker() {\n  Ext_detachRFoptions(prefixlist, prefixN);\n}\n\nvoid RelaxUnknownRFoption(int *RELAX) {\n  Ext_relaxUnknownRFoption((bool) *RELAX);\n}\n",
    "created" : 1523605214729.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1313214853",
    "id" : "70B5F79E",
    "lastKnownWriteTime" : 1523605232,
    "last_content_update" : 1523605232080,
    "path" : "C:/Users/tpook/Desktop/R-Stuff/HaploBlocker/src/options.cc",
    "project_path" : "src/options.cc",
    "properties" : {
    },
    "relative_order" : 84,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "cpp"
}