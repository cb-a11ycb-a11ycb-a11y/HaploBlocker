{
    "collab_server" : "",
    "contents" : "#' Merging neighbouring blocks\n#'\n#' Function to merging neighbouring block with similar haplotypes/allels\n#' @param blocklist block-dataset\n#' @param blockinfo List with all relevant information to each window seperatly\n#' @param indi number of haplotypes in the dataset\n#' @param nwindow number of windows in the dataset\n#' @param intersect_func Used intersect-function (internally relevant for computation time)\n#' @param max_diff_l maximum number of windows with different haplotypes inbetween (default: 1)\n#' @param max_diff_i maximum number of individuals in only one of the two blocks (default: 1)\n#' @param dataset dataset which variant nr. for each window\n#' @export\n\nblock_closeblock_merging <- function(blocklist, blockinfo,  indi, nwindow, max_diff_l, max_diff_i, intersect_func=intersect, dataset){\n  same <- matrix(0, ncol=length(blocklist), nrow=length(blocklist))\n\n  for(index in 1:length(blocklist)){\n    for(index2 in index:length(blocklist)){\n      same[index,index2] <- same[index2,index] <- length(intersect_func(blocklist[[index]][[6]], blocklist[[index2]][[6]]))\n    }\n  }\n  merges <- (same>=diag(same)-max_diff_i) * t(same>=diag(same)-max_diff_i)\n  a <- which(merges==1, arr.ind=TRUE)\n  a <- a[a[,1]!=a[,2],]\n  a <- a[a[,1]>a[,2],,drop=FALSE]\n  a <- rbind(rbind(a,NULL)[,2:1],NULL)\n\n  if(nrow(a)>0){\n    for(index in 1:nrow(a)){\n      vor <- a[index,1]\n      nach <- a[index,2]\n      cluster <- blocklist[[index]][[12]]\n      if(vor>0){\n        vor_ende <- blocklist[[vor]][[3]]$window\n        nach_start <- blocklist[[nach]][[2]]$window\n\n        mittelwerte <- dataset[[cluster]][intersect_func(blocklist[[vor]][[6]], blocklist[[nach]][[6]]), -c(1:vor_ende, nach_start:nwindow), drop=FALSE]\n        variants <- numeric(ncol(mittelwerte))\n        common <- numeric(ncol(mittelwerte))\n        if(length(variants)>0){\n          for(index2 in 1:length(variants)){\n            variants[index2] <- length(unique(mittelwerte[,index2]))\n            if(variants[index2]==1){\n              common[index2] <- mittelwerte[1,index2]\n            } else{\n              versions <- unique(mittelwerte[,index2])\n              counts <- numeric(length(versions))\n              for(index3 in 1:length(versions)){\n                counts[index3] <- sum(mittelwerte[,index2]==versions[index3])\n              }\n              common[index2] <- versions[which.max(counts)[1]]\n            }\n          }\n        }\n\n        if(sum(variants>1)<= max_diff_l){\n          blocklist[[vor]][[1]] <- sort(unique(blocklist[[vor]][[1]], blocklist[[nach]][[1]]))\n          prev <- blocklist[[vor]][[3]]$window - blocklist[[vor]][[2]]$window\n          blocklist[[vor]][[2]]$window <- min(blocklist[[vor]][[2]]$window, blocklist[[nach]][[2]]$window)\n          blocklist[[vor]][[3]]$window <- max(blocklist[[vor]][[3]]$window, blocklist[[nach]][[3]]$window)\n          blocklist[[vor]][[2]]$snp <- min(blocklist[[vor]][[2]]$snp, blocklist[[nach]][[2]]$snp)\n          blocklist[[vor]][[3]]$snp <- max(blocklist[[vor]][[3]]$snp, blocklist[[nach]][[3]]$snp)\n          blocklist[[vor]][[2]]$bp <- min(blocklist[[vor]][[2]]$bp, blocklist[[nach]][[2]]$bp)\n          blocklist[[vor]][[3]]$bp <- max(blocklist[[vor]][[3]]$bp, blocklist[[nach]][[3]]$bp)\n          blocklist[[vor]][[6]] <- intersect_func(blocklist[[vor]][[6]], blocklist[[nach]][[6]])\n          blocklist[[vor]][[5]] <- length(blocklist[[vor]][[6]])\n          if(prev+length(common) == (blocklist[[vor]][[3]]$window-blocklist[[vor]][[2]]$window)){\n            blocklist[[vor]][[4]] <- c(blocklist[[vor]][[4]], common)\n\n          } else{\n            blocklist[[vor]][[4]] <- c(blocklist[[vor]][[4]], common, blocklist[[nach]][[4]][(length(blocklist[[nach]][[4]])- (blocklist[[vor]][[3]]$window-blocklist[[vor]][[2]]$window-length(blocklist[[vor]][[4]])-length(common))):length(blocklist[[nach]][[4]])])\n          }\n          change <- which(a[,1]==a[index,2])\n          new_diff <- which(variants>1) + vor_ende\n\n          if(length(blocklist[[vor]])>=8 && length(blocklist[[nach]])>=8){\n            blocklist[[vor]][[8]] <- sort(c(blocklist[[vor]][[8]], blocklist[[nach]][[8]], new_diff))\n          } else if(length(blocklist[[vor]])>=8){\n            blocklist[[vor]][[8]] <- sort(c(blocklist[[vor]][[8]], new_diff))\n          } else if(length(blocklist[[nach]])>=8){\n            blocklist[[vor]][[8]] <- sort(c(blocklist[[nach]][[8]], new_diff))\n          } else{\n            blocklist[[vor]][[8]] <- sort(new_diff)\n          }\n          a[change,1] <- 0\n        } else{\n          a[index,2] <- 0\n        }\n      }\n    }\n  }\n  removes <- unique(c(0,a[,2]))[-1]\n  for(rindex in sort(removes, decreasing = TRUE)){\n    blocklist[[rindex]] <- NULL\n  }\n  return(blocklist)\n}\n\n",
    "created" : 1513778952383.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "298104358",
    "id" : "CC082648",
    "lastKnownWriteTime" : 1524216568,
    "last_content_update" : 1524216568,
    "path" : "C:/Users/tpook/Desktop/R-Stuff/HaploBlocker/R/block_closeblock_merging.R",
    "project_path" : "R/block_closeblock_merging.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 19,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}