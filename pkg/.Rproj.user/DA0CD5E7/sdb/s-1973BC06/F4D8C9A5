{
    "collab_server" : "",
    "contents" : "\n## M =  SNPx x animals\n## CM is coded matrix\n## V is a vector\n\n# START_C <- 0\n\nfixcoding <- function(values)\n  .Call(C_fixcoding, if (is.numeric(values)) as.integer(values) else values)\n\ncodeSNPs <- function(M, redo=is.character(M), SNPxINDIVID=TRUE)\n  .Call(C_codeSNPs, M, 0L, as.logical(redo), SNPxINDIVID)\n\ndecodeSNPs <- function(CM) .Call(C_decodeSNPs, CM)\n\nfactorSNPs <- function(CM, start=1, end=attr(CM, \"position\")[2] + 1) {\n  CM <- as.matrix(CM)\n  if (is.null(attr(CM, \"position\")))\n    CM <- .Call(C_codeSNPs, CM, 0L, FALSE, TRUE)\n  .Call(C_factorSNPs, CM, as.integer(start - 1), as.integer(end - 1))\n}\n\ncolSumsEqualSNPs <- function(CM, start = 1, V, select = NULL) {\n  start <- as.integer(start - 1)\n  if (is.null(attr(CM, \"position\")))\n    CM <- .Call(C_codeSNPs, CM, start, FALSE,TRUE)\n  pos <- attr(CM, \"position\")\n  stopifnot(!is.null(pos))\n  if (missing(V)) V <- CM\n  else if (is.null(attr(V, \"position\")))\n    V <- .Call(C_codeSNPs, V, start, FALSE, TRUE)\n .Call(C_colSumsEqualSNPs, CM, start, V, select)\n}\n\nintersect_sortednumeric <- function(a, b) .Call(C_intersect, a, b)\n\n\nif (FALSE) {\n\n  Equal <- function(A, B) {\n    attr(A, \"position\") <- attr(A, \"position\")[1:5]\n#   Print(A, B)\n    stopifnot(all.equal(A, B))\n  }\n\n  fixcoding <- function(values) {\n    ans <- .Call(C_fixcoding, if (is.numeric(values)) as.integer(values) else values)\n    Equal(ans, CHaploBlockerAlt::fixcoding(values))\n    return(ans)\n  }\n\n  codeSNPs <- function(M, redo=is.character(M), SNPxINDIVID=TRUE) {\n##    Print(list(C_codeSNPs, M, 0L, as.logical(redo), SNPxINDIVID))\n    ans <- .Call(C_codeSNPs, M, 0L, as.logical(redo), SNPxINDIVID)\n    Equal(ans, CHaploBlockerAlt::codeSNPs(M, redo))\n    return(ans)\n  }\n\n  decodeSNPs <- function(CM) {\n   ans <- .Call(C_decodeSNPs, CM)\n     Equal(ans, CHaploBlockerAlt::decodeSNPs(CM))\n   return(ans)\n  }\n\n  factorSNPs <- function(CM, start=1, end=attr(CM, \"position\")[2] + 1) {\n    CM <- as.matrix(CM)\n    if (is.null(attr(CM, \"position\")))\n      CM <- .Call(C_codeSNPs, CM, 0L, FALSE, TRUE)\n    ans <-  .Call(C_factorSNPs, CM, as.integer(start - 1), as.integer(end - 1))\n     Equal(ans, CHaploBlockerAlt::factorSNPs(CM, start, end))\n   return(ans)\n  }\n\n  colSumsEqualSNPs <- function(CM, start = 1, V, select = NULL) {\n    xx <- CHaploBlockerAlt::colSumsEqualSNPs(CM, start, V, select)\n\n##     Print(start)\n    start <- as.integer(start - 1)\n    if (is.null(attr(CM, \"position\")))\n      CM <- .Call(C_codeSNPs, CM, start, FALSE,TRUE)\n\n     if (missing(V)) V <- CM\n     else if (is.null(attr(V, \"position\")))\n      V <- .Call(C_codeSNPs, V, start, FALSE, TRUE)\n\n    ##    Print(\"neu\", CM, start, V, select);\n  ##  Print(C_colSumsEqualSNPs, CM, start, V, select)\n    ans <- .Call(C_colSumsEqualSNPs, CM, start, V, select)\n    Equal(ans, xx)\n    return(ans)\n }\n\n  intersect <- function(a, b) {\n   ans <-  .Call(C_intersect, a, b)\n    Equal(ans, CHaploBlockerAlt::intersect(a,b))\n   return(ans)\n }\n\n}\n",
    "created" : 1524212367051.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3455790365",
    "id" : "F4D8C9A5",
    "lastKnownWriteTime" : 1524668066,
    "last_content_update" : 1524668066844,
    "path" : "C:/Users/tpook/Desktop/R-Stuff/HaploBlocker/R/SNPs.R",
    "project_path" : "R/SNPs.R",
    "properties" : {
    },
    "relative_order" : 93,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}