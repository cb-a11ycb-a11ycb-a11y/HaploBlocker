{
    "collab_server" : "",
    "contents" : "#' Library presents diploid\n#'\n#' Calculate upper limited of present in a blocklist (ignore possible phasing errors)\n#' @param blocklist block-dataset\n#' @param s0m dataset of diploid individuals to check\n#' @param min_similarity XXX\n#' @export\n\ndiploid_upper <- function(blocklist, s0m, min_similarity=0.99){\n  n_block <- length(blocklist)\n  max_size <- numeric(n_block)\n\n  for(index in 1:n_block){\n    start <- blocklist[[index]][[2]]$snp\n    end <- blocklist[[index]][[3]]$snp\n    seq <- blocklist[[index]][[7]]$snp\n    same <- s0m[start:end,]==seq\n    for(index2 in 1:(ncol(s0m)/2)){\n      same[,index2] <- (same[,index2*2] + same[,index2*2-1])>0\n    }\n    max_sim <- colSums(same[,1:index2]) / nrow(same)\n    max_size[index] <- sum(max_sim>=min_similarity)\n\n  }\n  return(max_size)\n}\n\n#' Library presents diploid\n#'\n#' Calculate upper limited of present in a blocklist (ignore possible phasing errors)\n#' @param blocklist block-dataset\n#' @param s0m dataset of diploid individuals to check\n#' @param min_similarity XXX\n#' @export\n\ndiploid_upper2 <- function(blocklist, s0m, min_similarity=0.99){\n  n_block <- length(blocklist)\n  max_size <- numeric(n_block)\n  max_double <- numeric(n_block)\n  for(index in 1:n_block){\n    start <- blocklist[[index]][[2]]$snp\n    end <- blocklist[[index]][[3]]$snp\n    seq <- blocklist[[index]][[7]]$snp\n    same <- s0m[start:end,]==seq\n    double_check <- colSums(same) / nrow(same)\n    max_double <- numeric((ncol(s0m)/2))\n    for(index2 in 1:(ncol(s0m)/2)){\n      same[,index2] <- (same[,index2*2] + same[,index2*2-1])>0\n      max_double[index2] <- sum(double_check[c(index2*2, index2*2-1)]>=min_similarity)\n    }\n    max_sim <- colSums(same[,1:(ncol(s0m)/2)]) / nrow(same)\n    maxt <- max_single <- (max_sim>min_similarity)\n    maxt[max_double>max_single] <- max_double[max_double>max_single]\n    max_size[index] <- sum(maxt)\n\n  }\n  return(max_size)\n}\n\n#' Library presents haploid\n#'\n#' Calculate upper limited of present in a blocklist (not-ignore possible phasing errors)\n#' @param blocklist block-dataset\n#' @param s0m dataset of diploid individuals to check\n#' @param min_similarity XXX\n#' @export\n\nhaploid_upper <- function(blocklist, s0m, min_similarity=0.99){\n  n_block <- length(blocklist)\n  max_size <- numeric(n_block)\n\n  for(index in 1:n_block){\n    start <- blocklist[[index]][[2]]$snp\n    end <- blocklist[[index]][[3]]$snp\n    seq <- blocklist[[index]][[7]]$snp\n    same <- s0m[start:end,]==seq\n    max_sim <- colSums(same) / nrow(same)\n    max_size[index] <- sum(max_sim>=min_similarity)\n\n  }\n  return(max_size)\n\n}\n",
    "created" : 1519207410837.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3976639013",
    "id" : "8DC62D9E",
    "lastKnownWriteTime" : 1524216569,
    "last_content_update" : 1524216569,
    "path" : "C:/Users/tpook/Desktop/R-Stuff/HaploBlocker/R/upper_estimator.R",
    "project_path" : "R/upper_estimator.R",
    "properties" : {
        "tempName" : "Untitled53"
    },
    "relative_order" : 54,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}