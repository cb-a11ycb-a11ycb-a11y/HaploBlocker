lines <- scan("NRGene_MAZE_sequence/haplotypes_similarity_B73_coords.vcf", nlines=1, what="character", skip=6)

geno_chip <- datas
lines_chip <- colnames(datas)
lines_chip <- substr(lines_chip, start=6, stop=9)
lines <- substr(lines[-(1:60)], start=6, stop=9)

take <- which(duplicated(c(lines,lines_chip))[-(1:length(lines))])

geno_chip <- datas[,take]

data <- read.table("NRGene_MAZE_sequence/haplotypes_similarity_B73_coords.vcf")
data2 <- as.matrix(data)
geno_haplo <- substr(data2[,-(1:60)], start=1, stop=1)

var_t <- numeric(nrow(geno_haplo))
for(index in 1:nrow(geno_haplo)){
  var_t[index] <- length(unique(geno_haplo[index,]))
}
geno_code <- matrix(0L, nrow=sum(var_t), ncol=ncol(geno_haplo))
row <- 1
for(index in 1:nrow(geno_haplo)){
  for(var in unique(geno_haplo[index,])){
    geno_code[row,] <- (geno_haplo[index,]==var)*2L
    row <- row + 1
    if(row%%1000==0) print(row)
  }
}

load("Genetic_Datasets/Batch3_KEPE/PE_DH_blockset.RData")
geno_blocker <- dataset[,take]*2

library(miraculix)
code <- createSNPmatrix(geno_chip)
G_chip <- relationshipMatrix(code, centered=TRUE, normalized=TRUE)


code <- createSNPmatrix(geno_code)
G_code <- relationshipMatrix(code, centered=TRUE, normalized=TRUE)

code <- createSNPmatrix(geno_blocker)
G_blocker <- relationshipMatrix(code, centered=TRUE, normalized=TRUE)




save(file="NRGene_MAZE_sequence/Info_content.RData", list=c("geno_chip", "geno_code", "geno_blocker", "G_chip", "G_code", "G_blocker"))


load("NRGene_MAZE_sequence/Info_content.RData")
load("NRGene_MAZE_sequence/Info_content2.RData")
load("NRGene_MAZE_sequence/Info_content3.RData")
load("NRGene_MAZE_sequence/Info_content4.RData")

lines <- scan("NRGene_MAZE_sequence/haplotypes_similarity_B73_coords.vcf", nlines=1, what="character", skip=6)
lines <- substr(lines[-(1:60)], start=6, stop=9)

pheno <- as.matrix(read.table("MAZE_BLUEs_acrossLocations_DHperse2017_v1.csv", sep=";"))[-(1:488),]
lines_pheno <- substr(pheno[,1], start=6, stop=9)
take2 <- which(duplicated(c(lines,lines_pheno))[-(1:length(lines))])
pheno <- pheno[take2,-1]
storage.mode(pheno) <- "numeric"

npheno <- 9
nsample <- 10
strain <- 250

acc_train_chip <- matrix(0, nrow=npheno, ncol=nsample)
acc_test_chip  <- matrix(0, nrow=npheno, ncol=nsample)
acc_train_seq1 <- matrix(0, nrow=npheno, ncol=nsample)
acc_test_seq1  <- matrix(0, nrow=npheno, ncol=nsample)
acc_train_seq2 <- matrix(0, nrow=npheno, ncol=nsample)
acc_test_seq2  <- matrix(0, nrow=npheno, ncol=nsample)
acc_train_seq3 <- matrix(0, nrow=npheno, ncol=nsample)
acc_test_seq3  <- matrix(0, nrow=npheno, ncol=nsample)
acc_train_seq4 <- matrix(0, nrow=npheno, ncol=nsample)
acc_test_seq4  <- matrix(0, nrow=npheno, ncol=nsample)
acc_train_code <- matrix(0, nrow=npheno, ncol=nsample)
acc_test_code  <- matrix(0, nrow=npheno, ncol=nsample)
acc_train_blocker <- matrix(0, nrow=npheno, ncol=nsample)
acc_test_blocker  <- matrix(0, nrow=npheno, ncol=nsample)
acc_train_joined <- matrix(0, nrow=npheno, ncol=nsample)
acc_test_joined  <- matrix(0, nrow=npheno, ncol=nsample)
acc_train_joined2 <- matrix(0, nrow=npheno, ncol=nsample)
acc_test_joined2  <- matrix(0, nrow=npheno, ncol=nsample)

library(sommer)
Z1 <- diag(nrow(pheno))
for(nr in 1:npheno){
  for(ns in 1:nsample){
    y_real <- pheno[,nr]
    train <- sample(1:340, strain)
    y_train <- y_real
    y_train[-train] <- NA

    ETA <- list( add=list(Z=Z1, K=G_chip) )
    ans <- sommer::mmer(Y=y_train, Z=ETA)
    y_hat <- ans$fitted.y

    acc_train_chip[nr,ns] <- cor(y_hat[train], y_real[train])
    acc_test_chip[nr,ns] <- cor(y_hat[-train], y_real[-train])

    if(FALSE){
      ETA <- list( add=list(Z=Z1, K=G_seq1) )
      ans <- sommer::mmer(Y=y_train, Z=ETA)
      y_hat <- ans$fitted.y

      acc_train_seq1[nr,ns] <- cor(y_hat[train], y_real[train])
      acc_test_seq1[nr,ns] <- cor(y_hat[-train], y_real[-train])

      ETA <- list( add=list(Z=Z1, K=G_seq2) )
      ans <- sommer::mmer(Y=y_train, Z=ETA)
      y_hat <- ans$fitted.y

      acc_train_seq2[nr,ns] <- cor(y_hat[train], y_real[train])
      acc_test_seq2[nr,ns] <- cor(y_hat[-train], y_real[-train])
      ETA <- list( add=list(Z=Z1, K=G_code) )
      ans <- sommer::mmer(Y=y_train, Z=ETA)
      y_hat <- ans$fitted.y

      acc_train_code[nr,ns] <- cor(y_hat[train], y_real[train])
      acc_test_code[nr,ns] <- cor(y_hat[-train], y_real[-train])

      ETA <- list( add=list(Z=Z1, K=G_blocker) )
      ans <- sommer::mmer(Y=y_train, Z=ETA)
      y_hat <- ans$fitted.y

      acc_train_blocker[nr,ns] <- cor(y_hat[train], y_real[train])
      acc_test_blocker[nr,ns] <- cor(y_hat[-train], y_real[-train])

      ETA <- list( list(Z=Z1, K=G_chip),list(Z=Z1, K=G_code) )
      ans <- sommer::mmer(Y=y_train, Z=ETA)
      y_hat <- ans$fitted.y

      acc_train_joined[nr,ns] <- cor(y_hat[train], y_real[train])
      acc_test_joined[nr,ns] <- cor(y_hat[-train], y_real[-train])

      ETA <- list( list(Z=Z1, K=G_chip),list(Z=Z1, K=G_blocker) )
      ans <- sommer::mmer(Y=y_train, Z=ETA)
      y_hat <- ans$fitted.y

      acc_train_joined2[nr,ns] <- cor(y_hat[train], y_real[train])
      acc_test_joined2[nr,ns] <- cor(y_hat[-train], y_real[-train])

      ETA <- list( add=list(Z=Z1, K=G_seq3) )
      ans <- sommer::mmer(Y=y_train, Z=ETA)
      y_hat <- ans$fitted.y

      acc_train_seq3[nr,ns] <- cor(y_hat[train], y_real[train])
      acc_test_seq3[nr,ns] <- cor(y_hat[-train], y_real[-train])

    }


    ETA <- list( add=list(Z=Z1, K=G_seq4) )
    ans <- sommer::mmer(Y=y_train, Z=ETA)
    y_hat <- ans$fitted.y

    acc_train_seq4[nr,ns] <- cor(y_hat[train], y_real[train])
    acc_test_seq4[nr,ns] <- cor(y_hat[-train], y_real[-train])


    print(c(nr,ns))
    print(c(rowMeans(acc_test_chip), rowMeans(acc_test_seq4)))
    save(file="prediction_acc2.RData", list=c("acc_test_chip", "acc_test_code", "acc_test_blocker", "acc_test_joined", "acc_test_joined2",
                                             "acc_train_chip", "acc_train_code", "acc_train_blocker", "acc_train_joined", "acc_train_joined2",
                                             "acc_test_seq1", "acc_test_seq2", "acc_train_seq1", "acc_train_seq2", "acc_test_seq3", "acc_train_seq3",
                                             "acc_test_seq4", "acc_train_seq4"))
  }

}
