## Monte Carlo method - Information preserved
library(sommer)
source("GenVar_2703.R")

nRep=500

G_Z <- G_chip
G_B <- G_code
G_H <- G_blocker

Z <- geno_chip
B <- geno_code
H <- geno_blocker

p <- nrow(Z)
q <- nrow(B)
h <- nrow(H)

EVD1=eigen(G_Z)
EVD2=eigen(G_B)

chip_code <- chip_blocker <- code_chip <- code_blocker <- blocker_chip <- blocker_code <- rep(NA,nRep)

library(sommer)
for(i in 1:nRep){
  b <- rnorm(p)
  y_real  <- scale(t(Z)%*%b) # Simulate Effect based on SNP-data

  lm.blup <- mmer(Y=y_real, X=NULL, Z=list(A=list(K=G_B)), silent=TRUE,
                  iters=20, tolpar=1e-3,
                  tolparinv=1e-6) # use sommer package for mixed model solving

  g.hat <- as.vector(lm.blup$u.hat$A)
  var.b.hat <- as.numeric(lm.blup$var.comp$A)
  var.e.hat <- as.numeric(lm.blup$var.comp$units)

  var.BLUP <- var.Equi(g.hat=g.hat, G=G_B, var.b.hat=var.b.hat, var.e.hat=var.e.hat)

  if(var.e.hat!=0){
    var.BLUP <- var.Equi(g.hat=g.hat, G=G_H, var.b.hat=var.b.hat, var.e.hat=var.e.hat)
    chip_code[i]= var.BLUP[[4]] / (var.BLUP[[4]] + var.e.hat)
  } else{
    chip_code[i]= 1
  }

  lm.blup <- mmer(Y=y_real, X=NULL, Z=list(A=list(K=G_H)), silent=TRUE,
                  iters=20, tolpar=1e-3,
                  tolparinv=1e-6) # use sommer package for mixed model solving

  g.hat <- as.vector(lm.blup$u.hat$A)
  var.b.hat <- as.numeric(lm.blup$var.comp$A)
  var.e.hat <- as.numeric(lm.blup$var.comp$units)

  if(var.e.hat!=0){
    var.BLUP <- var.Equi(g.hat=g.hat, G=G_H, var.b.hat=var.b.hat, var.e.hat=var.e.hat)
    chip_blocker[i]= var.BLUP[[4]] / (var.BLUP[[4]] + var.e.hat)
  } else{
    chip_blocker[i]= 1
  }


  b <- rnorm(q)
  y_real  <- scale(t(B)%*%b) # Simulate Effect based on SNP-data

  lm.blup <- mmer(Y=y_real, X=NULL, Z=list(A=list(K=G_Z)), silent=TRUE,
                  iters=20, tolpar=1e-3,
                  tolparinv=1e-6) # use sommer package for mixed model solving

  g.hat <- as.vector(lm.blup$u.hat$A)
  var.b.hat <- as.numeric(lm.blup$var.comp$A)
  var.e.hat <- as.numeric(lm.blup$var.comp$units)

  if(var.e.hat!=0){
    var.BLUP <- var.Equi(g.hat=g.hat, G=G_Z, var.b.hat=var.b.hat, var.e.hat=var.e.hat)
    code_chip[i] <- var.BLUP[[4]] / (var.BLUP[[4]] + var.e.hat)
  } else{
    code_chip[i]= 1
  }


  lm.blup <- mmer(Y=y_real, X=NULL, Z=list(A=list(K=G_H)), silent=TRUE,
                  iters=20, tolpar=1e-3,
                  tolparinv=1e-6) # use sommer package for mixed model solving

  g.hat <- as.vector(lm.blup$u.hat$A)
  var.b.hat <- as.numeric(lm.blup$var.comp$A)
  var.e.hat <- as.numeric(lm.blup$var.comp$units)

  if(var.e.hat!=0){
    var.BLUP <- var.Equi(g.hat=g.hat, G=G_H, var.b.hat=var.b.hat, var.e.hat=var.e.hat)
    code_blocker[i] <- var.BLUP[[4]] / (var.BLUP[[4]] + var.e.hat)
  } else{
    code_blocker[i]= 1
  }



  b <- rnorm(h)
  y_real  <- scale(t(H)%*%b) # Simulate Effect based on SNP-data

  lm.blup <- mmer(Y=y_real, X=NULL, Z=list(A=list(K=G_B)), silent=TRUE,
                  iters=20, tolpar=1e-3,
                  tolparinv=1e-6) # use sommer package for mixed model solving

  g.hat <- as.vector(lm.blup$u.hat$A)
  var.b.hat <- as.numeric(lm.blup$var.comp$A)
  var.e.hat <- as.numeric(lm.blup$var.comp$units)

  if(var.e.hat!=0){
    var.BLUP <- var.Equi(g.hat=g.hat, G=G_B, var.b.hat=var.b.hat, var.e.hat=var.e.hat)
    blocker_code[i]= var.BLUP[[4]] / (var.BLUP[[4]] + var.e.hat)
  } else{
    blocker_code[i]= 1
  }


  lm.blup <- mmer(Y=y_real, X=NULL, Z=list(A=list(K=G_Z)), silent=TRUE,
                  iters=20, tolpar=1e-3,
                  tolparinv=1e-6) # use sommer package for mixed model solving

  g.hat <- as.vector(lm.blup$u.hat$A)
  var.b.hat <- as.numeric(lm.blup$var.comp$A)
  var.e.hat <- as.numeric(lm.blup$var.comp$units)

  if(var.e.hat!=0){
    var.BLUP <- var.Equi(g.hat=g.hat, G=G_Z, var.b.hat=var.b.hat, var.e.hat=var.e.hat)
    blocker_chip[i]= var.BLUP[[4]] / (var.BLUP[[4]] + var.e.hat)
  } else{
    blocker_chip[i]= 1
  }



  print(c(chip_code[i], chip_blocker[i], code_chip[i], code_blocker[i], blocker_chip[i], blocker_code[i]))
  save(file=paste0("information_content_ana.RData"), list=c("chip_code", "chip_blocker", "code_chip", "code_blocker", "blocker_chip", "blocker_code"))

}




